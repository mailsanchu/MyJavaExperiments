import com.couchbase.client.deps.com.fasterxml.jackson.core.JsonProcessingException;
import com.couchbase.client.deps.com.fasterxml.jackson.databind.MapperFeature;
import com.couchbase.client.deps.com.fasterxml.jackson.databind.ObjectMapper;
import com.couchbase.client.java.Bucket;
import com.couchbase.client.java.Cluster;
import com.couchbase.client.java.CouchbaseCluster;
import com.couchbase.client.java.document.JsonDocument;
import com.couchbase.client.java.document.json.JsonObject;
import io.github.benas.randombeans.EnhancedRandomBuilder;
import io.github.benas.randombeans.FieldDefinition;
import io.github.benas.randombeans.api.EnhancedRandom;
import io.github.benas.randombeans.api.Randomizer;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;

import javax.net.ssl.HttpsURLConnection;
import java.nio.charset.Charset;
import java.util.Map;
import java.util.Random;



@SpringBootApplication
@ComponentScan(basePackages = {""})
@EnableAutoConfiguration(exclude = {DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class})
public class Application {
    private static final String LOCALHOST = "localhost";

    public static void main(String[] args) throws JsonProcessingException {
        //Class<LinearContentDocument> linearContentDocumentClass = LinearContentDocument.class;
        Class<ChannelDocument> channelDocumentClass = ChannelDocument.class;
        String s = "ChannelDocument_Sanchu";
        EnhancedRandom enhancedRandom = EnhancedRandomBuilder.aNewEnhancedRandomBuilder()
                .seed(123L)
                .objectPoolSize(1)
                .randomizationDepth(100)
                .charset(Charset.forName("UTF-8"))
                .stringLengthRange(1,1)
                .randomize(Long.class, (Randomizer<Long>) () -> System.currentTimeMillis())
                .randomize(Integer.class, (Randomizer<Integer>) () -> new Random().nextInt(20180101))
                .randomize(new FieldDefinition("duration", Integer.class, channelDocumentClass),(Randomizer<Integer>) () -> 100)
                .randomize(new FieldDefinition("status", IngestStatus.class, channelDocumentClass), (Randomizer<IngestStatus>) () -> COMPLETE)
                .randomize(new FieldDefinition("source", String.class, channelDocumentClass), (Randomizer<String>) () -> "Traffic-CMS")
                .randomize(new FieldDefinition("resourceId", String.class, channelDocumentClass),(Randomizer<String>) () -> s)
                .randomize(new FieldDefinition("ccid", String.class, channelDocumentClass), (Randomizer<String>) ()-> s)
                .collectionSizeRange(0, 0)
                .scanClasspathForConcreteTypes(true)
                .overrideDefaultInitialization(false)
                .build();
        ChannelDocument lcD = enhancedRandom.nextObject(ChannelDocument.class);
        //lcD.setCcid("Sanchu");
//        System.out.println(new ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(lcD));
        ObjectMapper o = new ObjectMapper();
        o.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true);
        o.registerModule(new DocumentTypeModule());
        System.out.println(o.writerWithDefaultPrettyPrinter().writeValueAsString(lcD));
        Cluster cluster = CouchbaseCluster.create("");
        Bucket bucket = cluster.openBucket("", "");
        JsonObject jsonObject = JsonObject.fromJson(o.writeValueAsString(lcD));
        JsonDocument doc = JsonDocument.create(lcD.getCcid(), jsonObject);
        JsonDocument response = bucket.upsert(doc);
        cluster.disconnect();
     /*   System.out.println(o.writerWithDefaultPrettyPrinter().
                writeValueAsString(new TreeMap<>(
                        new Test().getFieldClassMap(LinearContentDocument.class))));*/
        System.out.println(response);
    }

    @Bean
    public CouchBaseDAO<LinearContentDocument> linearContentCouchBaseDAO(CouchbaseRepositoryFactory crf) {
        return crf.getDAO(LinearContentDocument.class);
    }

    static {
        String defaultSocketTimeout = "10000";
        System.setProperty("com.couchbase.socketConnectTimeout", defaultSocketTimeout);
        HttpsURLConnection.setDefaultHostnameVerifier((hostname, session) -> LOCALHOST.equals(hostname));
    }

    static class Test extends DefaultFieldClassMapFactory {
        public Map<String, FieldDescriptor> getFieldClassMap(Class<?> type) {
            return super.getFieldClassMap(type);
        }

    }

}
