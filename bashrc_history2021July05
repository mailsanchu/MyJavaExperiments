sed 's/.*vis-network.*/   "vis-network":"^8.3.3"/' package.json 
sed 's/.*vis-network.*/    "vis-network":"^8.3.3"/' package.json 
sed 's/.*vis-network.*/    "vis-network":"^8.3.3"/' package.json 
docker stop gremlin-visualizer:latest
docker stop 4e861a5b5d73
docker ps -a 
vim tmp.js
nautilus .
docker stop gremlin-visualizer
docker stop 51e7482ae442
v
a
e
wget --no-check-certificate https://github.com/prabushitha/gremlin-visualizer/archive/master.zip && \
wget --no-check-certificate https://github.com/prabushitha/gremlin-visualizer/archive/master.zip 
zip master.zip
unzip master.zip
M=hd uR khd
M=hd uR dhd
M=hd uR dhp
M=hd uR rhp
kp cs-prod1 -l app=hollow-producer
kp cs-prod2 -l app=hollow-producer
ping cs-neptune-prod-cluster-v5-1-blue-us-west-2a.cmp95eyb2qml.us-west-2.neptune.amazonaws.com:
ping cs-neptune-prod-cluster-v5-1-blue-us-west-2a.cmp95eyb2qml.us-west-2.neptune.amazonaws.com
kd cs-prod1 -l app=edge
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"|"}{.metadata.creationTimestamp}{"|"}{.status.containerStatuses[*].restartCount}{"|"}{.status.containerStatuses[*].lastState.terminated.exitCode}{"|"}{.status.containerStatuses[*].lastState.terminated.reason}{"|"}{.status.containerStatuses[*].lastState.terminated.startedAt}{"|"}{.status.containerStatuses[*].lastState.terminated.finishedAt}{"|"}{.metadata.labels.routeoffer}{"|"}{.metadata.labels.version}{"|"}{.spec.containers[].resources.limits.cpu}{"|"}{.spec.containers[].resources.limits.memory}{"\n"}{end}' --context cs-prod{} -l 'app=edge'  | column -t -s"|"| sort -k3,3n
echo 1 |xargs -I{} -n 1 -P 4 mKube get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"|"}{.metadata.creationTimestamp}{"|"}{.status.containerStatuses[*].restartCount}{"|"}{.status.containerStatuses[*].lastState.terminated.exitCode}{"|"}{.status.containerStatuses[*].lastState.terminated.reason}{"|"}{.status.containerStatuses[*].lastState.terminated.startedAt}{"|"}{.status.containerStatuses[*].lastState.terminated.finishedAt}{"|"}{.metadata.labels.routeoffer}{"|"}{.metadata.labels.version}{"|"}{.spec.containers[].resources.limits.cpu}{"|"}{.spec.containers[].resources.limits.memory}{"\n"}{end}' --context cs-prod{} -l 'app=edge'  | column -t -s"|"| sort -k3,3n
kubectl get hpa "$1" -o=custom-columns='NAME:metadata.name' --no-headers --context "$CXT"
kubectl get po -o=custom-columns='NAME:metadata.name' --no-headers --context cs-prod1
kubectl get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod1
kubectl get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod1 -l app=edge | uniq -c
kubectl get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod2 -l app=edge | uniq -c
kubectl get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod2 -l app=hollow-producer | uniq -c
kubectl get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod2 -l app=hollow-producer | uniq -c | nl
kubectl get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod2 -l app=edge | uniq -c | nl
kubectl get configmap edge-2-2-8 -o json --context cs-prod1 | jq -r '. as {data: $V, metadata: {annotations: $K}} | reduce ($K | keys_unsorted)[] as $k ({};  . + {($K[$k]): $V[$k]})' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"'  | column -t -s"|"
kubectl get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod1 | uniq -c
mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod1 | uniq -c
mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod1 | uniq -c | osrt
mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod1 | uniq -c | sort
mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod1 | uniq -c | sort -n
mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod1 -l app=edge | uniq -c | sort -n
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l app=edge| uniq -c | sort -
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l app=edge| uniq -c | sort - |"transactionCount":Â 0,
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l app=edge| uniq -c | sort - |   awk '{printf " %02i %s\n",NR,$0}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l app=edge| uniq -c | sort - |   | awk '{printf "%-65s%25s\n", $1, $2}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l app=edge| uniq -c | sort -n |    awk '{printf "%-65s%25s\n", $1, $2}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l app=edge| uniq -c | sort -n |    awk '{printf "%65s%25s\n", $1, $2}'
myS -t  --tail 3 -l 'version=372.0.3' --context cs-prod2 
myS -t  --tail 30 -l 'version=372.0.3' --context cs-prod2 
myS -t  --tail 50 -l 'version=372.0.3' --context cs-prod2 
tail -f /tmp/1  2>/dev/null
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l app=edge| uniq -c | sort -n |    awk '{printf "%5s-%25s\n", $1, $2}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l app=edge| uniq -c | sort -n |    awk '{printf "%5s%-25s\n", $1, $2}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l app=edge| uniq -c | sort -n |    awk '{printf "%5s%25-s\n", $1, $2}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l app=edge| uniq -c | sort -n |    awk '{printf "%5s%25s\n", $1, $2}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l app=edge| uniq -c | sort -n | nawk '{printf "%5s%25s\n", $1, $2}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l app=edge| uniq -c | sort -n | nawk '{sprintf "%05s%25s\n", $1, $2}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l app=edge| uniq -c | sort -n | nawk '{printf "%05s%25s\n", $1, $2}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l app=edge| uniq -c | sort -n | gawk '{printf "%05s%25s\n", $1, $2}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l app=edge| uniq -c | sort -n | gawk '{printf "%-05s%25s\n", $1, $2}'
kp cs-prod3 -l app=edge -L routeoffer
kp cs-prod4 -l app=edge -L routeoffer
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l app=edge| uniq -c | sort -n | gawk '{printf "%-05s%-25s\n", $1, $2}'
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '. as {data: $V, metadata: {annotations: $K}} | reduce ($K | keys_unsorted)[] as $k ({};  . + {($K[$k]): $V[$k]})' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"'  | column -t -s"|"
L
npm run build
npm start
e
e
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '.data'
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '.data, metadata.annotations'
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '.data, .metadata.annotations'
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]'
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]' | jq -r .[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )'
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '. as {data: $V, metadata: {annotations: $K}} | reduce ($K | keys_unsorted)[] as $k ({};  . + {($K[$k]): $V[$k]})' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"'  | column -t -s"|"
M=hp uR
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )'  | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"'  | column -t -s"|"
kp cs-prod2 -l app=hollow-producer
kubectl describe pod hollow-producer-2-0-3-79f7f9f55-7jsfh --context cs-prod2
exit
att
L
L
code config/prod
code config/prod.properties 
bin/kafka-console-consumer.sh --topic cs-view2-dbs-blue --bootstrap-server localhost:9092  --partition 0 --consumer.config config/prod.properties  | tee /tmp/k.log
bin/kafka-console-consumer.sh --topic cs-view2-dbs-blue --bootstrap-server localhost:9092  --partition 0 --consumer.config config/prod.properties  | tee /tmp/k1.log
e
kubectl describe pod hollow-producer-2-0-3-79f7f9f55-7jsfh --context cs-prod2
exit
att
L
ki cs-prod2
curl "https://cs-catalogservice-edge-592-2-3.awsw2.cld.dtvops.net/api/nodes/d1fb3670-94b0-480f-b961-a6698854d271" | jq .
curl "https://cs-catalogservice-edge-592-2-3.awsw2.cld.dtvops.net/api/nodes/8eb9a78b-f707-5ee8-9701-5c5d9fb1f275" | jq .
curl "https://cs-catalogservice-edge-592-2-3.awsw2.cld.dtvops.net/api/nodes/8eb9a78b-f707-5ee8-9701-5c5d9fb1f275?ignore_publication_window=true" | jq .
curl -X POST "http://localhost:8490/view/compileToStream?subGraphRootId=a67188bf-eb12-5175-a8ee-79930f70fbd2"
curl "https://cs-catalogservice-edge-592-2-3.awsw2.cld.dtvops.net/api/nodes/4cd06edc-d308-5aff-928a-95dddc7eb0a8?ignore_publication_window=true" | jq .
ki cs-staging
curl -s "https://cs-catalogservice-edge-580-2-3.staging.aeg.cloud/api/nodes/ac0cbd1c-06ff-3151-8eac-2cdb0badcd98"
curl -s "https://cs-catalogservice-edge-580-2-3.staging.aeg.cloud/api/nodes/d3abc4e0-625b-346c-93fa-ab4ad25583ef"
curl -s "https://cs-catalogservice-edge-580-2-3.staging.aeg.cloud/api/nodes/d3abc4e0-625b-346c-93fa-ab4ad25583ef" | grep lin
curl -s "https://cs-catalogservice-edge-580-2-3.staging.aeg.cloud/api/nodes/d3abc4e0-625b-346c-93fa-ab4ad25583ef" | grep jq .id
curl -s "https://cs-catalogservice-edge-580-2-3.staging.aeg.cloud/api/nodes/d3abc4e0-625b-346c-93fa-ab4ad25583ef" | jq .id
curl -s "https://cs-catalogservice-edge-580-2-3.staging.aeg.cloud/api/nodes/d3abc4e0-625b-346c-93fa-ab4ad25583ef" | jq .[].id
curl -s "https://cs-catalogservice-edge-580-2-3.staging.aeg.cloud/api/nodes/d3abc4e0-625b-346c-93fa-ab4ad25583ef" | jq -r .[].id
curl -s "https://cs-catalogservice-edge-580-2-3.staging.aeg.cloud/api/nodes/ac0cbd1c-06ff-3151-8eac-2cdb0badcd98" | jq -r .[].id
ssh ec2-user@10.223.20.240
kp cs-prod1 -l app=edge
ki cs-prod1 -l app=edge
ki cs-prod2 -l app=edge
ki cs-prod2 -l app=edge | gawk '{printf "%-25s\n", $2}'
ki cs-prod2 -l app=edge | gawk '{printf "https://%s\n", $2}'
ki cs-prod2 -l app=edge | gawk '{printf "https://%s/explorer\n", $2}'
ki cs-prod2 -l app=edge | gawk '{printf "https://%s/api/nodes/bd0ea604-9387-456f-a7ba-9c7ad4ada31d\n", $2}'
e
cd /tmp
l
grep  '.*linearPPV.*' linearPPV 
grep  '.*linearPPV>' linearPPV 
grep  '.*linearPPV>t' linearPPV 
grep  '.*linearPPV>f' linearPPV 
curl -s "https://cs-catalogservice-edge-580-2-3.staging.aeg.cloud/api/nodes/ac0cbd1c-06ff-3151-8eac-2cdb0badcd98" | jq -r .[]
e
bin/kafka-server-start.sh config/server.properties
e
vim ~/bin/configMap
chmod a+x ~/bin/configMap
configMap edge-2-2-10 cs-prod1
cd ~/dev/app/kafka_2.11-1.1.1
bin/zookeeper-server-start.sh config/zookeeper.properties 
e
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '. as {data: $V, metadata: {annotations: $K}} | reduce ($K | keys_unsorted)[] as $k ({};  . + {($K[$k]): $V[$k]})' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"'  | column -t -s"|"
M=hp uR
kp cs-prod2 -l app=hollow-producer
kubectl describe pod hollow-producer-2-0-3-79f7f9f55-7jsfh --context cs-prod2
exit
att
L
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )'  | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"'  | column -t -s"|"
kp cs-prod2 -l app=edge
myS -t  --tail 50 -l 'name=edge-372-3-0' --context cs-prod2 
kubectl get configmap edge-372-3-0 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )'  | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"'  | column -t -s"|"
#
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"|"}{.metadata.creationTimestamp}{"|"}{.status.containerStatuses[*].restartCount}{"|"}{.status.containerStatuses[*].lastState.terminated.exitCode}{"|"}{.status.containerStatuses[*].lastState.terminated.reason}{"|"}{.status.containerStatuses[*].lastState.terminated.startedAt}{"|"}{.status.containerStatuses[*].lastState.terminated.finishedAt}{"|"}{.metadata.labels.routeoffer}{"|"}{.metadata.labels.version}{"|"}{.spec.containers[].resources.limits.cpu}{"|"}{.spec.containers[].resources.limits.memory}{"\n"}{end}' --context cs-prod{} -l 'app=edge'  | column -t -s"|"| sort -k3,3n
kubectl get configmap view-3-7-0 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )'  | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"'  | column -t -s"|"
kubectl get configmap view-3-7-0 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )'  | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"'  | column -t -s"|"
cd ~/dev/code/gremlin-visualizer/
npm start
e
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l app=edge| uniq -c | sort -n | gawk '{printf "%-05s%25s\n", $1, $2}'
kp cs-prod3 -l app=edge -L routeoffer
kp cs-prod4 -l app=edge -L routeoffer
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l app=edge| uniq -c | sort -n | gawk '{printf "%-05s%-25s\n", $1, $2}'
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '. as {data: $V, metadata: {annotations: $K}} | reduce ($K | keys_unsorted)[] as $k ({};  . + {($K[$k]): $V[$k]})' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"'  | column -t -s"|"
npm run build
npm start
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '.data'
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '.data, metadata.annotations'
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '.data, .metadata.annotations'
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]'
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]' | jq -r .[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )'
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '. as {data: $V, metadata: {annotations: $K}} | reduce ($K | keys_unsorted)[] as $k ({};  . + {($K[$k]): $V[$k]})' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"'  | column -t -s"|"
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )'  | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"'  | column -t -s"|"
exit
att
tail -f /tmp/1  2>/dev/null
kubectl logs hollow-producer-2-0-3-79f7f9f55-7jsfh --context cs-prod2 --previous 
kp cs-prod2 -l app=hollow-producer
kubectl describe pod hollow-producer-2-0-3-79f7f9f55-7jsfh --context cs-prod2
CNT=0 patchHIB hollow-producer-1-2-8
seq 1 3 | xargs -I{} -n 1 -P 4 kubectl patch deployment --context cs-prod{} hollow-producer-1-2-8 --patch="$(cat /home/svarkey/tmp/hib.yml)"
kp cs-prod3 -l app=hollow-producer
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod{} -l name=hollow-producer-1-2-8 | uniq -c | sort -n | gawk '{printf "%-05s%-25s\n", $1, $2}'
M=hp uR
M=hs uR
dYY 1624542949475
i
L
goL
v
/home/svarkey/.nvm/versions/node/v15.12.0/bin/node /home/svarkey/dev/code/Personal/JavaS/Dave.js
which node 
ki cs-prod2 -l app=hollow-producer -L name -o wide
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )|  keys_unsorted[] as $k | [$k, .[$k]] | join("|")' 
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )|  keys[] as $k | [$k, .[$k]] | join("|")' 
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } ) | keys[] as $k | [$k, .[$k]] | join("|")' 
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } ) | keys[] as $k | [$k, .[$k]] | join("|")' | column -t -s "|"
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } ) | keys[] as $k | [$k, .[$k]] | join("|")' | column -t -s "|" -o "    "
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } ) | keys[] as $k | [$k, .[$k]] | join("|")' | column -t -s "|" -o "                          "
message=transactionId == 1624659512 RelationShipCount|1117367|NodeCount|0882633|Curr Offset|58556019910|Processed|0002000000|Used Memory|14464| Free Memory|10111| Total Memory|24576| Max Memory|24576| ViewQueue.viewMessageQueue.size()|08000|
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } ) | keys[] as $k | [$k, .[$k]] | join("|")' | column -t -s "|" -o "|"
myS -t  --tail 3 -l 'version=1.2.9' --context cs-prod2 hollow-producer-1-2-9-67cdb8bc6b-292zf
myS -t  --tail 3000 -l 'version=1.2.9' --context cs-prod2 hollow-producer-1-2-9-67cdb8bc6b-292zf -e ".*Index.*"
myS -t  --tail 30 -l 'name=search-1-8-0' --context cs-prod2
myS -t  --tail 3 -l 'name=search-1-8-0' --context cs-prod2 -n catalog-curation
myS -t  --tail 30 -l 'name=search-1-8-0' --context cs-prod2 -n catalog-curation
e
npm start
e
configMap 
configMap hollow-producer-372-0-3 cs-prod2
oP configMap
kubectl get configmap "edge-2-2-10" -o json --context "cs-prod4" | jq -r '[.data, .metadata.annotations]' | jq -r '.data as $dict | .metadata.annotations | with_entries( {value: $dict[.key], key: (.value|tostring) } )'  | column -t -s"|"
kubectl get configmap "edge-2-2-10" -o json --context "cs-prod4" | jq -r '.data as $dict | .metadata.annotations | with_entries( {value: $dict[.key], key: (.value|tostring) } )'  |  jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
kubectl get configmap "edge-2-2-10" -o json --context "cs-prod4" | jq -r '.data as $dict | .metadata.annotations | with_entries( $dict[.key], (.value|tostring) } )'
kubectl get configmap "edge-2-2-10" -o json --context "cs-prod4" | jq -r '.data as $dict | .metadata.annotations | with_entries( select($dict[.key], (.value|tostring)) } )'
kubectl get configmap "edge-2-2-10" -o json --context "cs-prod4"  | jq -r '.data as $dict | .metadata.annotations | with_entries( {value: $dict[.key], key: (.value|tostring) } )'  | column -t -s"|"
kubectl get configmap "edge-2-2-10" -o json --context "cs-prod4"  | jq -r '.data as $dict | .metadata.annotations | with_entries( {value: $dict[.key], key: (.value|tostring) } )|  keys[] as $k | "\($k)|\(.[$k])"'  
kubectl get configmap "edge-2-2-10" -o json --context "cs-prod4"  | jq -r '.data as $dict | .metadata.annotations | with_entries( {value: $dict[.key], key: (.value|tostring) } )| keys[] as $k | "\($k)|\(.[$k])"' 
kubectl get configmap "edge-2-2-10" -o json --context "cs-prod4"| jq -r '.data as $dict | .metadata.annotations | with_entries( {value: $dict[.key], key: (.value|tostring) } )| keys[] as $k | "\($k)|\(.[$k])"' 
kubectl get configmap "edge-2-3-0" -o json --context "cs-dev"| jq -r '.data as $dict | .metadata.annotations | with_entries( {value: $dict[.key], key: (.value|tostring) } )| keys[] as $k | "\($k)|\(.[$k])"' 
i
kubectl get configmap "edge-2-3-0" -o json --context "cs-dev"| jq -r '.data as $dict | .metadata.annotations | with_entries( {value: $dict[.key], key: (.value|tostring) } )| keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
att
kubectl get configmap hollow-producer-372-0-3 -o json --context cs-prod2 | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } ) | keys[] as $k | [$k, .[$k]] | join("|")' | column -t -s "|" -o "|"
ifconfig
att
ping router.asus.com
exec bash
myS -t  --tail 3000 -l 'version=1.2.9' --context cs-prod2 hollow-producer-1-2-9-67cdb8bc6b-292zf -e ".*Index.*"
myS -t  --tail 3000 -l 'version=2.3.0' --context cs-dev
cd /
kubectl get pods --context cs-prod2 -l name=edge-2-2-8 -o jsonpath='{range .items[*]}{range .spec.containers[*].env[*]}{.name}{"|"}{.valueFrom}{"\n"}{end}{end}'  | column -t -s"|" 
kubectl get pods --context cs-prod2 -l name=edge-2-2-10 -o jsonpath='{range .items[*]}{range .spec.containers[*].env[*]}{.name}{"|"}{.valueFrom}{"\n"}{end}{end}'  | column -t -s"|" 
kubectl get configmaps 
kubectl get configmaps global
kubectl get configmaps hollow-producer-dfwplatform-app-default-configs
kubectl get configmaps hollow-producer-dfwplatform-app-default-configs -o json
kubectl get configmaps global -o json
configMap global cs-dev
configMap global cs-dev | sed '/^[[:space:]]*$/d'
configMap global cs-dev | sed -r '/^\s*$/d'
configMap global cs-dev | awk 'NF'
configMap global cs-dev | grep -Ev "^$"
configMap hollow-producer-dfwplatform-app-default-configs cs-dev
configMap edge-dfwplatform-app-default-configs cs-dev
ex
e
code /home/svarkey/.bash_history 
configMap hollow-producer-372-0-3 cs-prod2
L
e
kubectl get configmaps global
kubectl get configmaps hollow-producer-dfwplatform-app-default-configs
kubectl get configmaps hollow-producer-dfwplatform-app-default-configs -o json
kubectl get configmaps global -o json
configMap global cs-dev
configMap global cs-dev | sed '/^[[:space:]]*$/d'
configMap global cs-dev | sed -r '/^\s*$/d'
configMap global cs-dev | awk 'NF'
configMap global cs-dev | grep -Ev "^$"
configMap hollow-producer-dfwplatform-app-default-configs cs-dev
ex
code /home/svarkey/.bash_history 
configMap hollow-producer-372-0-3 cs-prod2
cd '/home/svarkey/dev/code/IDS_New/CS/hollow-consumer
cd '/home/svarkey/dev/code/IDS_New/CS/hollow-consumer'
rm -rvf /home/svarkey/tmp/blo/catalogservice-prod-view-custom-index-list1-snapshot-4f01739c-20210626181415105
a
att
configMap edge-dfwplatform-app-default-configs cs-dev
configMap edge-dfwplatform-app-default-configs cs-prod1
configMap hollow-producer-dfwplatform-app-default-configs cs-prod1
configMap hollow-producer-dfwplatform-app-default-configs cs-staging
myS -t  --tail 30 -l 'name=search-1-8-0' --context cs-prod2 -n catalog-curation
sudo apt-get update
sudo apt-get upgrade
kubectl get pods --context cs-prod2 -l name=edge-2-2-8 -o jsonpath='{range .items[*]}{range .spec.containers[*].env[*]}{.name}{"|"}{.valueFrom}{"\n"}{end}{end}'  | column -t -s"|" 
kubectl get pods --context cs-prod2
kubectl get pods --context cs-prod2 | | awk '$4>0'
kubectl get pods --context cs-prod2 | awk '$4>0'
mKube get pods --context cs-prod2 | awk '$4>0'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod2 | awk '$4>0'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod2 --no-headers | awk '$4>0'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod2 --no-headers | awk '$4>0' | sort -k4,4n
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers | awk '$4>0' | sort -k4,4n
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers | awk '$4>0' | sort -k4,4n Z column -t 
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers | awk '$4>0' | sort -k4,4n |  column -t 
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers -L name | awk '$4>0' | sort -k4,4n |  column -t 
L
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers -L app | awk '$4>0' | sort -k4,4n |  column -t 
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers -L app | awk '$4>0' | sort -k1 |  column -t 
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers -L app | awk '$4>0' | sort -k6 |  column -t 
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers -L app | awk '$4>0' | sort -k6 -k4,4n|  column -t 
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers -L app | awk '$4>0' | sort -k6 -k4,4n -k1 |  column -t 
cd /home/svarkey/dev/code/Personal/JavaS
PACKAGE_VERSION=$(cat package.json | grep version  | head -1   | awk -F: '{ print $2 }' | sed 's/[",]//g')
PACKAGE_VERSION=$(cat package.json | grep version  | head -1   | awk -F: '{ print $2 }' )
cat package.json 
echo $PACKAGE_VERSION
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers -L app | awk '$4>0' | sort -k6 -k4,4n -k1,1 |  column -t 
e
e
cd /tmp
2015-03-13, 19:25, 22.602, 0.62, 0.25
$ echo "$(curl -skLO https://git.io/speedtest.sh && chmod +x speedtest.sh && ./speedtest.sh)"
2015-03-13, 19:25, 22.602, 0.62, 0.25
$ echo "$(curl -skLO https://git.io/speedtest.sh && chmod +x speedtest.sh && ./speedtest.sh)"
jq 'map({(.id): .value}) | add' all_channel_ids.json 
jq 'map({(.id): .statys}) | add' all_channel_ids.json 
jq 'map({(.id): .status}) | add' all_channel_ids.json 
jq -r 'map({(.id): .status}) | add' all_channel_ids.json 
jq -r 'map({(.id)|.status}) | add' all_channel_ids.json 
jq -r 'map({(.id)\|.status}) | add' all_channel_ids.json 
jq -r 'map({(.id):.status}) | add' all_channel_ids.json 
jq -r 'map({(.id):.status}) | add | keys[] as $k | "\($k)|\(.[$k])"' all_channel_ids.json 
jq -r 'map({(.id):.status}) | add | keys[] as $k | "\($k)|\(.[$k])"' all_channel_ids.json | column -t -s"|"
cd /
configMap hollow-producer-dfwplatform-app-default-configs cs-prod1
configMap search-1-8-0 cs-prod1 -n catalog-curation
kubectl get configmaps search-1-8-0 --context cs-prod1 -n catalog-curation
kubectl get configmaps search-1-8-0 -o json --context cs-prod1 -n catalog-curation
kubectl get configmaps search-dfwplatform-app-default-configs -o json --context cs-prod1 -n catalog-curation
kubectl get configmaps search-dfwplatform-app-default-configs -o json --context cs-prod1 -n catalog-curation 
oP configMap
kubectl get configmaps search-dfwplatform-app-default-configs -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
kubectl get configmaps search-1-6-0 -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
kubectl get configmaps search-1-6-5 -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
kubectl get configmaps search-1-7-0 -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
kubectl get configmaps search-1-8-0 -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
e
cd /tmp
wget http://dl1.technet24.ir/Downloads/Software/Cisco/AnyConnect/anyconnect-linux64-4.10.01075-predeploy-k9.tar.gz
L
e
kubectl get configmaps search-1-8-0 -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
myS -t  --tail 900000 -l 'version in (1.2.9)' --context cs-prod2 -i ".*Current number of populated ordinals.*"
pP
fg
myS -t  --tail 1 -l 'version in (2.2.10)' --context cs-prod2
myS -t  --tail 3000 -l 'version=1.2.9' --context cs-prod2 hollow-producer-1-2-9-67cdb8bc6b-292zf -e ".*Index.*"
e
att
e
kubectl get configmaps search-1-8-0 --context cs-prod1 -n catalog-curation
kubectl get configmaps search-1-8-0 -o json --context cs-prod1 -n catalog-curation
kubectl get configmaps search-dfwplatform-app-default-configs -o json --context cs-prod1 -n catalog-curation
kubectl get configmaps search-dfwplatform-app-default-configs -o json --context cs-prod1 -n catalog-curation 
oP configMap
kubectl get configmaps search-dfwplatform-app-default-configs -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
kubectl get configmaps search-1-6-0 -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
kubectl get configmaps search-1-6-5 -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
kubectl get configmaps search-1-7-0 -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
kubectl get configmaps search-1-8-0 -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
e
cd /tmp
wget http://dl1.technet24.ir/Downloads/Software/Cisco/AnyConnect/anyconnect-linux64-4.10.01075-predeploy-k9.tar.gz
L
e
kubectl get configmaps search-1-8-0 -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
myS -t  --tail 900000 -l 'version in (1.2.9)' --context cs-prod2 -i ".*Current number of populated ordinals.*"
pP
fg
myS -t  --tail 1 -l 'version in (2.2.10)' --context cs-prod2
myS -t  --tail 3000 -l 'version=1.2.9' --context cs-prod2 hollow-producer-1-2-9-67cdb8bc6b-292zf -e ".*Index.*"
e
att
e
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers -L app | awk '$4>0' | sort -k6 -k4,4n -k1,1 |  column -t 
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers -L app,routeoffer | awk '$4>0' | sort -k6 -k4,4n -k1,1 |  column -t 
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers -L app,routeoffer | awk '$4>0' | sort -k6 -k4,4n -k1 |  column -t 
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers -show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |  column -t 
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers -show-labels 
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels 
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |  column -t 
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |  column -t  -s, 
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 | awk -F, '{$0=$6}1'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 | awk -F, '{$0=$7}1'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 | | awk '{split($0,a); print a[3]; print a[2]; print a[1]}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |  awk '{split($0,a); print a[3]; print a[2]; print a[1]}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |  awk '{split($6,a); print a[3]; print a[2]; print a[1]}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |  awk '{split($6,a,,); print a[3]; print a[2]; print a[1]}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |  awk '{split($6,a,","); print a[3]; print a[2]; print a[1]}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |  awk '{split($6,a,","); print a[3]; print a[2]; print a[1],print $1}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |  awk '{split($6,a,","); print a[3]; print a[2]; print a[1];print $1}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |  awk '{split($6,a,","); print a[3]; print a[2]; print a[1];print $1;print a[4]}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |  awk '{split($6,a,","); print a[3]; print a[2]; print a[1];print $1;print a[4];print a[5]}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |  awk '{split($6,a,","); print a[3]; print a[2]; print a[1];print $1;print a[4];print a[5];print a[6]}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |  awk '{split($6,a,","); print a[3]; print a[2]; print a[1];print $1;print a[4];print a[5];print a[7]}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |  awk '{split($6,a,","); print a[3]; print a[2]; print a[1];print $1;print a[4];print a[5];print a[6];print [7]}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |  awk '{split($6,a,","); print a[3]; print a[2]; print a[1];print $1;print a[4];print a[5];print a[6];print a[7]}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |  awk '{split($6,a,","); print a[3]; print a[2]; print a[1];print $1;print a[4];print a[5];print a[6];print a[7];print a[8]}'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 | |awk '{ split($9,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5, a[1], a[2],$10); }'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($9,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5, a[1], a[2],$10); }'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5, a[1], a[2],$10); }'
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5, a[1], a[2],$10); }' | column 
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5, a[1], a[2],$10); }' | column -t
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5, a[1], a[2],a[3]); }' | column -t
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5, a[1], a[2],a[3],a[4]); }' | column -t
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5, a[1], a[2],a[3],a[4]); }' | column -t
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5, a[1], a[2],a[3],a[4],a[5]); }' | column -t
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5, a[1], a[2],a[3],a[4],a[6]); }' | column -t
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5, a[1], a[2],a[3],a[4],a[6]); }' | column -t
cd '/home/svarkey/dev/code/IDS_New/CS/hollow-consumer'
cd '/home/svarkey/dev/code/IDS_New/CS/hollow-producer/
cd '/home/svarkey/dev/code/IDS_New/CS/hollow-producer/'
jJ
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,a[1],a[2],a[3],a[4],a[6]); }' | column -t
seq 1 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,a[1],a[2],a[3],a[4],a[6]); }' | column -t | nl
fc -N 3
echo 1 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,a[1],a[2],a[3],a[4],a[6]); }' | column -t | nl
echo 2 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,a[1],a[2],a[3],a[4],a[6]); }' | column -t | nl
echo 3 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,a[1],a[2],a[3],a[4],a[6]); }' | column -t | nl
echo 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} --no-headers --show-labels | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,a[1],a[2],a[3],a[4],a[6]); }' | column -t | nl
echo 2 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,a[1],a[2],a[3],a[4],a[6]); }' | column -t | nl
echo 3 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,a[1],a[2],a[3],a[4],a[6]); }' | column -t | nl
echo 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,a[1],a[2],a[3],a[4],a[6]); }' | column -t | nl
echo 2 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,a[1],a[2],a[3],a[4],a[6]); }' | column -t | nl
echo 3 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,a[1],a[2],a[3],a[4],a[6]); }' | column -t | nl
echo 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ split($6,a , ","); printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,a[1],a[2],a[3],a[4],a[6]); }' | column -t | nl
echo 2 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5); }' | column -t | nl
echo 3 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5); }' | column -t | nl
echo 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5); }' | column -t | nl

echo 1 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ printf("%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5); }' | column -t | nl
echo 2 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ printf("%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5); }' | column -t | nl
echo 3 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ printf("%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5); }' | column -t | nl
echo 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ printf("%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5); }' | column -t | nl
echo 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ printf("%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5); }' | column -t | nl
echo 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 |awk '{ printf("%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5i,$6,$7); }' | column -t | nl
echo 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 | | column -t | nl
echo 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name --no-headwrs | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
echo 3 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name --no-headwrs | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
tail -f /tmp/1  2>/dev/null
echo 3 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name --no-headwrs | awk '$4>0' 
echo 3 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name --no-headwrs 
echo 3 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name 
echo 3 |xargs -I{} -n 1 -P 4 mKube --no-headers get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
echo 1 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
echo 1 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
echo 1 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
echo 2 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
echo 3 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
echo 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
exit
/home/svarkey/bin/configMap
/home/svarkey/bin/configMap hollow-producer-372-0-3 cs-prod1
echo 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name --no-headwrs | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
echo 3 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name --no-headwrs | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
tail -f /tmp/1  2>/dev/null
echo 3 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name --no-headwrs | awk '$4>0' 
echo 3 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name --no-headwrs 
echo 3 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name 
echo 3 |xargs -I{} -n 1 -P 4 mKube --no-headers get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
echo 1 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
echo 1 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
echo 1 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
echo 2 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
echo 3 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
exit
cd /opt
cd cisco/
cd anyconnect/bin/
ll
./vpn_uninstall.sh 
sudo ./vpn_uninstall.sh 
cd /tmp
ls an*
tar -xvf anyconnect-linux64-4.10.01075-predeploy-k9.tar.gz 
cd anyconnect-linux64-4.10.01075/
cd vpn/
ls
sudo ./vpn_install.sh 
att
echo 4 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
echo 1 |xargs -I{} -n 1 -P 4 kubectl get pods --context cs-prod{} -L app,version,name --no-headers| awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
echo 2 |xargs -I{} -n 1 -P 4 kubectl get pods --context cs-prod{} -L app,version,name --no-headers| awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
echo 3 |xargs -I{} -n 1 -P 4 kubectl get pods --context cs-prod{} -L app,version,name --no-headers| awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
echo 4 |xargs -I{} -n 1 -P 4 kubectl get pods --context cs-prod{} -L app,version,name --no-headers| awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl
echo 3 |xargs -I{} -n 1 -P 4 kubectl get pods --context cs-prod{} -L app,version,name --no-headers| awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl | CC
echo 2 |xargs -I{} -n 1 -P 4 kubectl get pods --context cs-prod{} -L app,version,name --no-headers| awk '$4>0' | sort -k6 -k4,4n -k1 | column -t | nl | CC
sudo apt-get update
sudo apt-get upgrade
l
cd '/home/svarkey/dev/code/IDS_New/CS/hollow-producer/'
jJ
sudo vim /etc/hosts
ping router.asus.com
git status
L
e
att
e
a
git status
L
att
juu
Juu
locale | grep LANG=
ls -l /usr/share/i18n/locales/ 
cd /usr/share/i18n/locales/ 
grep "first_weekday 1
sudo locale-gen
sed 's/first_weekday [[:digit:]]/first_weekday 1/' en_GB
sed 's/first_weekday [[:digit:]]/first_weekday 2/' en_GB
sed 's/first_weekday [[:digit:]]/first_weekday 7/' en_GB
sudo vim en_GB 
sudo sed 's/first_weekday [[:digit:]]/first_weekday 2/' en_GB
sudo sed 's/first_weekday [[:digit:]]/first_weekday 1/' en_GB
grep "first_weekday .*" en_GB
grep --color=none "first_weekday .*" en_GB
sudo sed 's/first_weekday [[:digit:]]/first_weekday 1/' $PWD/en_GB
echo $PWD
sudo sed 's/first_weekday [[:digit:]]/first_weekday 1/' /usr/share/i18n/locales/en_GB
grep --color=none "first_weekday .*" /usr/share/i18n/locales/en_GB
vim ~/bin/startDay
sudo locale-gen
e
L
sudo sed 's/first_weekday [[:digit:]]/first_weekday 1/' /usr/share/i18n/locales/en_GB
grep --color=none "first_weekday .*" /usr/share/i18n/locales/en_GB
vim ~/bin/startDay
sudo locale-gen
L
curl -vvv "http://localhost:8490/view/compileToStream?subGraphRootId=6e55bc17-8cdb-5d91-a30c-beead4fbeb96"
curl -X POST "http://localhost:8490/view/compileToStream?subGraphRootId=6e55bc17-8cdb-5d91-a30c-beead4fbeb96"
curl --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "5"}'
curl --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "1"}'
curl --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "1"}' | jq .
curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "1"}' | jq .
curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "2"}' | jq .
curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "2"}' | jq .|.id
curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "2"}' | jq .id
curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "2"}' | jq .[].id
curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "2"}' | jq .[](.id,.status)
curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "2"}' | jq '.[]|(.id|.status)'
curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "2"}' | jq '.[]|(.id,.status)'
curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "2"}' | jq '.[]|([.id,.status])'
curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "2"}' | jq -r '.[]|([.id,.status])'
curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "2"}' | jq -r '.[]|([.id,.status]|join("|") )'
curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "2"}' | jq -r '.[]|([.id,.status]|join("|"))'
curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "2"}' | jq -r '.[]|([.id,.status]|join("|"))' | column -t -s"|"
curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "20"}' | jq -r '.[]|([.id,.status]|join("|"))' | column -t -s"|"
curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "20"}' | jq -r '.[]|([.id,.status]|join("|"))' | column -t -s"|" | nl
curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "10"}' | jq -r '.[]|([.id,.status]|join("|"))' | column -t -s"|" | nl
echo "" && curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "10"}' | jq -r '.[]|([.id,.status]|join("|"))' | column -t -s"|" | nl
echo "" && curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "10"}' | jq -r '.[]|([.id,.status]|join("|"))' | column -t -s"|"
echo "" && curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "30"}' | jq -r '.[]|([.id,.status]|join("|"))' | column -t -s"|"
kp cs-prod1 -l app=edge 
kp cs-prod1 -l app=edge -L name
configMap edge-592-2-3 cs-staging
echo "" && curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType","customAttributes.listingSource"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "30"}' | jq -r '.[]|([.id,.status]|join("|"))' | column -t -s"|"
kubectl get configmaps --context cs-staging
echo "" && curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType","customAttributes.listingSource"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "200"}' | jq -r '.[]|([.id,.status]|join("|"))' | column -t -s"|"
echo "" && curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType","customAttributes.listingSource"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "2000"}' | jq -r '.[]|([.id,.status]|join("|"))' | column -t -s"|"
echo "" && curl -s --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType","customAttributes.listingSource"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "2000"}' | jq -r '.[]|([.id,.status]|join("|"))' | column -t -s"|" | nl
myS -t  --tail 3 -l 'version=2.3.0' --context cs-dev
configMap edge-592-2-3 cs-prod1
configMap edge-580-2-3 cs-staging
tail -f /tmp/1  2>/dev/null
cd /tmp
gC $(BB https://egbitbucket.dtvops.net/projects/CS/repos/catalogservice-gapscan)
gC $(BB https://egbitbucket.dtvops.net/projects/CS/repos/catalogservice-gapscan/source)
gC $(BB https://egbitbucket.dtvops.net/projects/CS/repos/catalogservice-gapscan/browse)
gC $(BB https://egbitbucket.dtvops.net/projects/CS/repos/catalogservice-view/browse)
l
meld catalogservice-gapscan/src/main/gateway catalogservice-view/src/main/gateway
e
cd ~/dev/code/gremlin-visualizer/
npm start
e
bin/kafka-console-consumer.sh --topic cs-view2-dbs-blue --bootstrap-server localhost:9092  --partition 0 --consumer.config config/prod.properties  | tee /tmp/k1.log
exit
bin/kafka-server-start.sh config/server.properties
exit
sudo locale-gen
L
/home/svarkey/bin/configMap hollow-producer-1-2-4 cs-prod1
kubectl get configmaps search-1-8-0 -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key: (.value|tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
kubectl get configmaps search-1-8-0 -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], (key| ascii_upcase ): (.value|tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
kubectl get configmaps search-1-8-0 -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], (key ): (.value|tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
kubectl get configmaps search-1-8-0 -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key : (.value|tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
kubectl get configmaps search-1-8-0 -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key : (.value| ascii_upcase |tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
kubectl get configmaps hollow-producer-1-2-4 -o json --context cs-prod1  | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key : (.value| ascii_upcase |tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
kubectl get configmaps hollow-producer-1-2-4 -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key : (.value| ascii_upcase |tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
cd ~/bin
l
chmod a+x startDay 
./startDay 
oP startDay 
oP configMap 
configMap search-1-8-0 cs-prod1 -n catalog-curation
configMap hollow-producer-dfwplatform-app-default-configs cs-prod1
goL
configMap edge-dfwplatform-app-default-configs cs-prod1
curl --location --request GET 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/info'
curl -vvv 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/info'
curl -vvv 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/env'
curl -vvv 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes/hello'
curl -vvv 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes/hello?Caller-Name=Sanchu'
curl --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"]}'
curl --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "500"}'
curl --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "5"}'
curl --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "5"}' | jq .
curl -s  --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "5"}' | jq .
cd ~/dev/app/kafka_2.11-1.1.1
bin/zookeeper-server-start.sh config/zookeeper.properties 
e
att
L
e
oP startDay 
oP configMap 
configMap search-1-8-0 cs-prod1 -n catalog-curation
configMap hollow-producer-dfwplatform-app-default-configs cs-prod1
goL
configMap edge-dfwplatform-app-default-configs cs-prod1
curl --location --request GET 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/info'
curl -vvv 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/info'
curl -vvv 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/env'
curl -vvv 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes/hello'
curl -vvv 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes/hello?Caller-Name=Sanchu'
curl --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"]}'
curl --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "500"}'
curl --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "5"}'
curl --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "5"}' | jq .
curl -s  --location --request POST 'https://api-dev.aeg.cloud/cs/catalogservice/edge/v2/api/nodes' --header 'Caller-Name: BPS-UI-Package-Policies-Detail' --header 'Content-Type: application/json' --data-raw '{"filter": "subType==Channel","fields" : ["id", "subType"],"max_child_recursion_depth":1,"child.filter": "subType==ChannelConfig","sort_by": ["customAttributes.guideCCID"],"offset" : 0,"limit" : "5"}' | jq .
cd ~/dev/app/kafka_2.11-1.1.1
bin/zookeeper-server-start.sh config/zookeeper.properties 
att
L
kp cs-dev -L name
curl -s "https://api-dev.aeg.cloud/cs/catalogservice/gapscan/v1"
curl -vvv "https://api-dev.aeg.cloud/cs/catalogservice/gapscan/v1"
pwd
meld catalogservice-view/pom.xml catalogservice-gapscan/pom.xml 
curl "https://api-dev.aeg.cloud/cs/catalogservice/gapscan/v1" | jq .
curl -s "https://api-dev.aeg.cloud/cs/catalogservice/gapscan/v1" | jq .
gedit k1.log
wget https://raw.githubusercontent.com/LinuxSDA/HashBang/master/Hashbang
cat Hashbang >> $HOME/.vimrc
vim demo
if a:portable
vim if a:portable
vim $HOME/.vimrc
vim demo.sh
rename .sh '' demo.sh
rename ".sh" '' demo.sh
rename ".sh" '' "demo.sh"
rename ".sh" "" "demo.sh"
rename "sh" "" "demo.sh"
ll
rename 's/\.sh//g' demo.sh 
locate "*.vim"
ls -l ~/.vim/plugin
ls -l ~/.vim
cd ~/.vim/autoload/
cp /tmp/Rename2.vim .
cd /tmp
vim demo 
rename 's/\.sh//g' /tmp/demoS
rename 's/\.sh//g' /tmp/demo
ls -l /tmp/demo
rename 's/\.sh//g' /tmp/Rename2.vim
rename 's/\.vim//g' /tmp/Rename2.vim
rename 's/\.*//g' /tmp/k1.log 
rename 's/\.(.*)//g' /tmp/linearPPV.xlsx 
l
e
L
e
oP startDay 
grep --color=none "first_weekday .*" "$LOCALE_FILE"
grep --color=none "first_weekday .*" /usr/share/i18n/locales/en_GB
egrep -oP "(?<=Request Body=)(.*)"  /usr/share/i18n/locales/en_GB
egrep -oP "(?<=first_weekday )(.*)"  /usr/share/i18n/locales/en_GB
grep -oP "(?<=first_weekday )(.*)"  /usr/share/i18n/locales/en_GB
grep --color=none -oP "(?<=first_weekday )(.*)"  /usr/share/i18n/locales/en_GB
startDay 
;
bash -x startDay 
bash  startDay 
att
exit
ssh admin@router.asus.com
att
echo 1 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 | | column -t | nl
echo 1 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 |  column -t | nl
echo 2 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 |  column -t | nl
e
L
e
egrep -oP "(?<=first_weekday )(.*)"  /usr/share/i18n/locales/en_GB
grep -oP "(?<=first_weekday )(.*)"  /usr/share/i18n/locales/en_GB
grep --color=none -oP "(?<=first_weekday )(.*)"  /usr/share/i18n/locales/en_GB
startDay 
;
bash -x startDay 
bash  startDay 
att
exit
ssh admin@router.asus.com
att
echo 1 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 | | column -t | nl
echo 1 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 |  column -t | nl
echo 2 |xargs -I{} -n 1 -P 4 mKube get pods --context cs-prod{} -L app,version,name | awk '$4>0' | sort -k6 -k4,4n -k1 |  column -t | nl
cd /tmp
rm -rvf demo
rename 's/\.(.*)//g' catalogservice-dev-int-view-snapshot.index
rename s/\.(.*)//g demo.sh
rename "s/\.(.*)//g" demo.sh
rename 's/\.(.*)//g' /tmp/demo.sh
vim demo.sh
rename -f 's/\.(.*)//g' /tmp/demo.sh
l
curl --location --request POST 'https://api.cld.dtvops.net/catalog/curation/search/v1/service/cs/search' --header 'Content-Type: application/json' --data-raw '{
    "query": "* AND customAttributes.legacyShowType:\"Movie\" AND customAttributes.providerNames:(\"Starz\") AND NOT customAttributes.genres:(\"Adults only\" or \"Erotic\") AND ((subType.keyword:Abstraction AND customAttributes.programType.keyword:(Movie OR Show OR Sport OR Episode)) OR (subType.keyword:CollectionAbstraction AND customAttributes.collectionType.keyword:SuperSeries))",
    "itemIndex": 0,
    "itemCount": 20,
    "sortField": "customAttributes.popularityRank3d",
    "sortOrder": "ASC"
}'
L
curl --location --request POST 'https://api.cld.dtvops.net/catalog/curation/search/v1/service/cs/search' --header 'Content-Type: application/json' --data-raw '{
    "query": "* AND customAttributes.legacyShowType:\"Movie\" AND customAttributes.providerNames:(\"Starz\") AND NOT customAttributes.genres:(\"Adults only\" or \"Erotic\") AND ((subType.keyword:Abstraction AND customAttributes.programType.keyword:(Movie OR Show OR Sport OR Episode)) OR (subType.keyword:CollectionAbstraction AND customAttributes.collectionType.keyword:SuperSeries))",
    "itemIndex": 0,
    "itemCount": 20,
    "sortField": "customAttributes.popularityRank3d",
    "sortOrder": "ASC"
}'
e
code /home/svarkey/.bash_aliases 
e
    "query": "* AND customAttributes.legacyShowType:\"Movie\" AND customAttributes.providerNames:(\"Starz\") AND NOT customAttributes.genres:(\"Adults only\" or \"Erotic\") AND ((subType.keyword:Abstraction AND customAttributes.programType.keyword:(Movie OR Show OR Sport OR Episode)) OR (subType.keyword:CollectionAbstraction AND customAttributes.collectionType.keyword:SuperSeries))",
    "itemIndex": 0,
    "itemCount": 20,
    "sortField": "customAttributes.popularityRank3d",
    "sortOrder": "ASC"
}'
e
code /home/svarkey/.bash_aliases 
e
cd /tmp
ls
rename -f 's/\.(.*)//g' 'UC Timetable-Day 1-Online.docx'
vim dM.js
rename -f 's/\.(.*)//g' /tmp/dM
rename -f dM dM.sh
rename -f 's//\.sh/g' /tmp/dM
rename -f 's/dM/\.sh/g' /tmp/dM
rename -f 's/\.(.*)//g' /tmp/dM.js
rename 's/(.*)/$1.sh/' dM
l
rename -f 's/(.*)/$1.sh/' dM
kp cs-dev -L name
kp cs-dev -L name -l name=hollow-producer
curl -s "https://api-dev.aeg.cloud/cs/catalogservice/gapscan/v1" | jq .
curl -v "https://api-dev.aeg.cloud/cs/catalogservice/gapscan/v1" | jq .
curl -v "https://api-dev.aeg.cloud/cs/catalogservice/gapscan/v1/health" | jq .
exec bash
cd ../../../..
cd ../..
echo $PWD | pB
rename -f 's/\.(.*)//g' 'UC Timetable-Day 1-Online.docx'
vim dM.js
rename -f 's/\.(.*)//g' /tmp/dM
rename -f dM dM.sh
rename -f 's//\.sh/g' /tmp/dM
rename -f 's/dM/\.sh/g' /tmp/dM
rename -f 's/\.(.*)//g' /tmp/dM.js
rename 's/(.*)/$1.sh/' dM
l
rename -f 's/(.*)/$1.sh/' dM
kp cs-dev -L name
kp cs-dev -L name -l name=hollow-producer
curl -s "https://api-dev.aeg.cloud/cs/catalogservice/gapscan/v1" | jq .
curl -v "https://api-dev.aeg.cloud/cs/catalogservice/gapscan/v1" | jq .
curl -v "https://api-dev.aeg.cloud/cs/catalogservice/gapscan/v1/health" | jq .
curl  "https://api-dev.aeg.cloud/cs/catalogservice/gapscan/v1/health" | jq .
cd /tmp
gC $(BB https://egbitbucket.dtvops.net/projects/CS/repos/catalogservice-view/browse)
gC $(BB https://egbitbucket.dtvops.net/projects/CS/repos/catalogservice-gapscan/browse)
meld catalogservice-view/pom.xml catalogservice-gapscan/pom.xml 
goL
meld catalogservice-gapscan/cicd catalogservice-view/cicd
cd catalogservice-gapscan
git status
cd ..
meld catalogservice-gapscan/src/main/gateway catalogservice-view/src/main/gateway
meld catalogservice-gapscan/src/main/gateway /home/svarkey/dev/code/IDS_New/CS/catalogservice-view/src/main/gateway
cd catalogservice-gapscan/src/main/gateway
ll
tree
vim CommonProxy/apiproxy/policies/
vim CommonProxy/apiproxy/proxies/as_auth_template_faultRules.flowfrag 
sed -e 's/\r//g' CommonProxy/apiproxy/proxies/as_auth_template_faultRules.flowfrag
kp cs-dev -l app=gapscan 
kp cs-dev -l app=gapscan --show-labels
curl  "https://api-dev.aeg.cloud/CS/catalogservice/gapscan/v1/info" | jq .
curl  "https://api-dev.aeg.cloud/CS/catalogservice/gapscan/v1/health" | jq .
curl -h "x-aeg-route-offer: master"  "https://api-dev.aeg.cloud/CS/catalogservice/gapscan/v1/health" | jq .
curl -H "x-aeg-route-offer: master"  "https://api-dev.aeg.cloud/cs/catalogservice/gapscan/v2/health" | jq .
curl -H "x-aeg-route-offer: master"  "https://api-dev.aeg.cloud/cs/catalogservice/gapscan/v3/health" | jq .
curl -H "x-aeg-route-offer: master"  "https://api-dev.aeg.cloud/CS/catalogservice/gapscan/v1/health" | jq .
curl -H "x-aeg-route-offer: master"  "https://api-dev.aeg.cloud/cs/catalogservice/gapscan/master/health" | jq .
curl -H "x-aeg-route-offer: master"  "https://api-dev.aeg.cloud/cs/catalogservice/gapscan/v1/health" | jq .
curl -H "x-aeg-route-offer: master"  "https://api-dev.aeg.cloud/cs/catalogservice/gapscan/health" | jq .
curl -H "x-aeg-route-offer: master"  "https://api-dev.aeg.cloud/cs/catalogservice/gapscan/gapscan" | jq .
curl -H "x-aeg-route-offer: master"  "https://api-dev-int.aeg.cloud/cs/catalogservice/gapscan/gapscan" | jq .
curl -H "x-aeg-route-offer: master"  "https://api-dev-int.aeg.cloud/cs/catalogservice/gapscan/gapscan"
curl -H "x-aeg-route-offer: master"  "https://api-dev-int.aeg.cloud/cs/catalogservice/gapscan/v1/health"
curl -vvv -H "x-aeg-route-offer: master"  "https://api-dev-int.aeg.cloud/cs/catalogservice/gapscan/v1/health"
curl -vvv -H "x-aeg-route-offer: master"  "https://api-dev-int.aeg.cloud/cs/catalogservice/gapscan/v0/health"
curl -vvv -H "x-aeg-route-offer: master"  "https://api-dev-int.aeg.cloud/cs/catalogservice/gapscan/v0/info"
curl -vvv -H "x-aeg-route-offer: master"  "https://api-dev-int.aeg.cloud/cs/catalogservice/gapscan/v1/info"
curl -vvv -H "X-Aeg-Route-Offer: master"  "https://api-dev-int.aeg.cloud/cs/catalogservice/gapscan/v1/info"
curl -vvv -H "X-Aeg-Route-Offer: master"  "https://api-dev-int.aeg.cloud/cs/catalogservice/gapscan/master/info"
curl -vvv -H "X-Aeg-Route-Offer: master"  "https://api-dev-int.aeg.cloud/cs/catalogservice/gapscan/master/sas"
curl -vvv -H "X-Aeg-Route-Offer: master"  "https://api-dev-int.aeg.cloud/cs/catalogservice/gapscan/v1/gaps/v_2_GREEN_20210629101229"
curl -vvv -H "X-Aeg-Route-Offer: master"  "https://api-dev-int.aeg.cloud/cs/catalogservice/gapscan/v0/gaps/v_2_GREEN_20210629101229"
curl -vvv -H "X-Aeg-Route-Offer: master"  "https://api-dev-int.aeg.cloud/cs/catalogservice/gapscan/gaps/v_2_GREEN_20210629101229"
curl -vvv -H "X-Aeg-Route-Offer: master"  "https://api-dev-int.aeg.cloud/cs/catalogservice/gapscan/gaps/v_2_GREEN_20210629101229" | jq .
curl -vv "https://api-dev-int.aeg.cloud/cs/catalogservice/gapscan/gaps/v_2_GREEN_20210629101229?X-Aeg-Route-Offer=master" | jq .
curl -s "https://api-dev-int.aeg.cloud/cs/catalogservice/gapscan/gaps/v_2_GREEN_20210629101229?X-Aeg-Route-Offer=master" | jq .
curl "https://api-dev-int.aeg.cloud/cs/catalogservice/gapscan/gaps/v_2_GREEN_20210629101229?X-Aeg-Route-Offer=master" | jq .
curl -s  "https://api-dev-int.aeg.cloud/cs/catalogservice/gapscan/gaps/v_2_GREEN_20210629101229?X-Aeg-Route-Offer=master" | jq .
exec bash
exec bash
/home/svarkey/dev/code/IDS_New/CS/hollow-consumer/src/main/java/com/att/eg/metadata/hollow/consumer/gitignore/release.sh
bash /home/svarkey/dev/code/IDS_New/CS/hollow-consumer/src/main/java/com/att/eg/metadata/hollow/consumer/gitignore/release.sh
uR
uR dhd
bash /tmp/hollow-producer/release.sh
myS -t  --tail 1 -l 'app=hollow-producer' --context cs-dev
kp cs-dev -L name -l name=hollow-producer
kubectl get pods --context  cs-dev -L name -l name=hollow-producer
kubectl get pods --context  cs-dev 
kubectl get pods --context  cs-dev -l app=hollow-producer
e
att
L
dos2unix
dos2unix
kubectl get pods --context  cs-dev -l app=hollow-producer
/bin/bash -x /home/svarkey/bin/truncateAws.sh
myS -t  --tail 1 -l 'app=hollow-producer' --context cs-dev
uR dhd
dYY 1624976669667
e
L
e
/home/svarkey/dev/code/IDS_New/CS/hollow-producer/Jenkinsfile
groovy /home/svarkey/dev/code/IDS_New/CS/hollow-producer/Jenkinsfile
i
cd '/home/svarkey/dev/code/IDS_New/CS/hollow-producer/'
gB
e
myS -t  --tail 1 -l 'app=hollow-producer' --context cs-dev
uR dhd
dYY 1624976669667
e
e
/home/svarkey/dev/code/IDS_New/CS/hollow-producer/Jenkinsfile
groovy /home/svarkey/dev/code/IDS_New/CS/hollow-producer/Jenkinsfile
i
cd '/home/svarkey/dev/code/IDS_New/CS/hollow-producer/'
gB
e
tail -f /tmp/1  2>/dev/null
kd cs-prod2 -L name
kd cs-prod2 -L name --sort-by='{.firstTimestamp}'
kd cs-prod2 -L name --sort-by=.metadata.creationTimestamp
configMap vieworchestrator-372-6-2 cs-prod2
L
configMap view-373-6-2 cs-prod2
echo "{030_040={}, 040_050={}, 050_060={}}"  | wc -m
att
kd cs-prod2 -l app=hollow-producer
kd cs-prod2 -l app=hollow-producer | nl
mKube get deployments --context cs-prod2 -l app=hollow-producer | nl
mKube get deployments --context cs-prod2 -l app=hollow-producer |sort -k3,3n 
mKube get deployments --context cs-prod2 -l app=hollow-producer --no-headers | sort -k3,3n  | nl
mKube get deployments --context cs-prod1 -l app=hollow-producer --no-headers | sort -k3,3n  | nl
mKube get deployments --context cs-prod3 -l app=hollow-producer --no-headers | sort -k3,3n  | nl
mKube get deployments --context cs-prod2 -l app=hollow-producer --no-headers | sort -k3,3n 
mKube get deployments --context cs-prod2 -l app=hollow-producer --no-headers | awk '$3 ==0 '
mKube get deployments --context cs-prod2 -l app=hollow-producer --no-headers | awk '$3 == 0 '
mKube get deployments --context cs-prod2 -l app=hollow-producer --no-headers -L name | awk '$3 == 0 '
mKube get deployments --context cs-prod2  --no-headers -L name | awk '$3 == 0 '
If you require immediate assistance, please contact:
sudo apt-get update
sudo apt-get upgrade
kp cs-dev -l app=edge
kp cs-staging -l app=edge
kp cs-dev -l app=edge -L routeoffer
myS -t  --tail 300 -l 'version=2.3.0' --context cs-dev
cd ~/bin
l
gDP
gSP
gD
startDay 
oP getGRMRouteOffer.sh 
curl -k -s "https://10.223.19.241:46838/info"
curl -k -s "https://10.223.19.241:46838/info" | jq .
http "https://10.223.19.241:46838/info"
http --help
http --verify no  "https://10.223.19.241:46838/info"
myS -t  --tail 300 -l 'version=2.3.0' --context cs-staging
myS -t  --tail 300000 -l 'version=2.3.0' --context cs-staging -e ".*400.*"
myS -t  --tail 300 -l 'version=2.3.0' --context cs-staging -e ".*400.*"
getGRMRouteOffer.sh 
kp cs-staging -l app=edge -L routeoffer
myS -t  --tail 30000 -l 'version=2.3.0' --context cs-staging -e ".*400.*"
exec bash
myS -t  --tail 30000 -l 'version=2.3.0' --context cs-staging -e ".*400.*"
exec bash
myS -t  --tail 3 -l 'version=2.3.0' --context cs-staging -e ".*400.*" | grep Status Code
myS -t  --tail 3 -l 'version=2.3.0' --context cs-staging -e ".*400.*" | grep "Status Code"
myS -t  --tail 3 -l 'version=2.3.0' --context cs-staging -e ".*400.*"
myS -t  --tail 3 -l 'version=2.3.0' --context cs-staging -e ".*400.*" | grep "Status Code\|Caller-Name"
myS -t  --tail 3 -l 'version=2.3.0' --context cs-staging -e ".*400.*" | grep "Status Code|Caller-Name"
myS -t  --tail 30 -l 'version=2.3.0' --context cs-staging -e ".*400.*" | grep "Status Code|Caller-Name"
kubectl get pods -l name=edge-2-3-0 --context cs-staging -o json
myS -t  --tail 30 -l 'version=2.3.0' --context cs-staging -e ".*400.*" | grep "Status Code\|Caller-Name"
e
myS -t  --tail 30 -l 'version=2.3.0' --context cs-staging -e ".*400.*" | grep "Status Code\|Caller-Name"
e
cd /
curl -s https://grm-edge.staging.aeg.cloud/GRMLWPService/v1/serviceEndPoint/getFromCache | jq -r '.serviceEndPointList[] | select(.name == "cs-catalogservice.edge") | [ .routeOffer, (.properties|map(select(.name=="branch").value)|join("|"))  , .name, (.version|join(".")) , ("https://"+.hostAddress+":"+ .listenPort+"/info"), .registrationTime] | @tsv ' | awk '{print $0 " staging"}'  | sort -k5n | nl
curl -s https://grm-edge.staging.aeg.cloud/GRMLWPService/v1/serviceEndPoint/getFromCache | jq -r '.serviceEndPointList[] | select(.name == "cs-catalogservice.edge") | [ .routeOffer, (.properties|map(select(.name=="branch").value)|join("|"))  , .name, (.version|join(".")) , ("https://"+.hostAddress+":"+ .listenPort+"/info"), .registrationTime] | @tsv ' | awk '{print $0 " staging"}'  | sort -k5n | column -t | nl
curl -s https://grm-edge.staging.aeg.cloud/GRMLWPService/v1/serviceEndPoint/getFromCache | jq -r '.serviceEndPointList[] | select(.name == "cs-catalogservice.edge")'
grep --color=none -oP "(?<=Request Body=)(.*)"
echo "app_jmx{mbean="tomcat",attribute="currentThreadsBusy",objectName="Tomcat:type=ThreadPool,name=\"https-jsse-nio-8443\"",} 19.0" | grep --color=none -oP "(?<=>* )(.*)"
echo "app_jmx{mbean="tomcat",attribute="currentThreadsBusy",objectName="Tomcat:type=ThreadPool,name=\"https-jsse-nio-8443\"",} 19.0" | grep --color=none -oP "(?<=.* )(.*)"
echo "app_jmx{mbean="tomcat",attribute="currentThreadsBusy",objectName="Tomcat:type=ThreadPool,name=\"https-jsse-nio-8443\"",} 19.0" | grep --color=none -oP "(?<= )(.*)"
myS -t  --tail 30 -l 'version=2.3.0' --context cs-staging -e ".*Slow.*" 
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging -e ".*Slow.*" 
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging | grep --color=none -oP "(?<=Status Code=)(.*)"
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging | grep --color=none -oP "Status Code=429"
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging | grep --color=none -oP "Status Code=429" | nl
exit
myS -t  --tail 50 -l 'version=2.0.3' --context cs-prod2 
myS -t  --tail 5 -l 'version=2.0.3' --context cs-prod2 
exit
curl -s -k "https://10.223.14.111:34296/prometheus" | grep "jsse-nio-8443"
while true ;do curl -s -k "https://10.223.14.111:34296/prometheus" | grep "jsse-nio-8443";sleep 10;done
while true ;do curl -s -k "https://10.223.14.111:34296/prometheus" | grep "currentThreadsBusy";sleep 10;done
while true ;do curl -s -k "https://10.223.14.111:34296/prometheus" | grep "currentThreadsBusy";date ; sleep 10;done
while true ;do curl -s -k "https://10.223.14.111:34296/prometheus" | grep "currentThreadsBusy.*$";date ; sleep 10;done
exit
exit
192.168.1.9
ssh 192.168.1.9
sudo rsync -chavzP --stats --exclude=".[!.]*"  /home/svarkey svarkey@192.168.1.9:/media/svarkey/c2369e5a-0d4c-425b-8e60-8fb5f137d43c/newLaptop
att
tail -f /tmp/1  2>/dev/null
while true ;do curl -s -k "https://10.223.14.111:34296/prometheus" | grep "currentThreadsBusy.*$";date ; sleep 10;done
e
myS -t  --tail 5 -l 'version=2.0.3' --context cs-prod2 
exit
curl -s -k "https://10.223.14.111:34296/prometheus" | grep "jsse-nio-8443"
while true ;do curl -s -k "https://10.223.14.111:34296/prometheus" | grep "jsse-nio-8443";sleep 10;done
while true ;do curl -s -k "https://10.223.14.111:34296/prometheus" | grep "currentThreadsBusy";sleep 10;done
while true ;do curl -s -k "https://10.223.14.111:34296/prometheus" | grep "currentThreadsBusy";date ; sleep 10;done
while true ;do curl -s -k "https://10.223.14.111:34296/prometheus" | grep "currentThreadsBusy.*$";date ; sleep 10;done
exit
exit
192.168.1.9
ssh 192.168.1.9
sudo rsync -chavzP --stats --exclude=".[!.]*"  /home/svarkey svarkey@192.168.1.9:/media/svarkey/c2369e5a-0d4c-425b-8e60-8fb5f137d43c/newLaptop
att
while true ;do curl -s -k "https://10.223.14.111:34296/prometheus" | grep "currentThreadsBusy.*$";date ; sleep 10;done
kC rate.limiting.enabled
uR dhd
uR khe
uR ked
kubectl get pods --context cs-staging 
MEM=28 bash -x patchD name=hollow-producer-372-0-3
seq 1 3 | xargs -I{} -n 1 -P 4 kubectl patch deployment --context cs-prod{} hollow-producer-372-0-3 --patch="$(cat ~/tmp/test.yml)"
configMap hollow-producer-372-0-3 cs-prod2 | tee /tmp/SanchuVarkey/1.txt
configMap hollow-producer-1-2-9 cs-prod2 | tee /tmp/SanchuVarkey/2.txt
cd /tmp/SanchuVarkey
meld 1.txt 2.txt 
kubectl get po --context cs-prod2 -l app=hollow-producer
seq  3 |xargs -I{} -n 1 -P 4 mKube get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"|"}{.metadata.creationTimestamp}{"|"}{.status.containerStatuses[*].restartCount}{"|"}{.status.containerStatuses[*].lastState.terminated.exitCode}{"|"}{.status.containerStatuses[*].lastState.terminated.reason}{"|"}{.status.containerStatuses[*].lastState.terminated.startedAt}{"|"}{.status.containerStatuses[*].lastState.terminated.finishedAt}{"|"}{.metadata.labels.routeoffer}{"|"}{.metadata.labels.version}{"|"}{.spec.containers[].resources.limits.cpu}{"|"}{.spec.containers[].resources.limits.memory}{"\n"}{end}' --context cs-prod{} -l app=hollow-producer  | column -t -s"|" -o "      "| sort -k3,3n
kubectl get pods -o json -n kube-system | jq -r '.items[] | .metadata.name + " \n Container name: " + .spec.containers[].name + " \n Req. RAM: " + .spec.containers[].resources.requests.memory + " \n Lim. RAM: " + .spec.containers[].resources.limits.memory + " \n Req. CPU: " + .spec.containers[].resources.requests.cpu + " \n Lim. CPU: " + .spec.containers[].resources.limits.cpu + " \n Req. Eph. DISK: " + .spec.containers[].resources.requests["ephemeral-storage"] + " \n Lim. Eph. DISK: " + .spec.containers[].resources.limits["ephemeral-storage"] + "\n"'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer  | jq -r '.items[] | .metadata.name + " \n Container name: " + .spec.containers[].name + " \n Req. RAM: " + .spec.containers[].resources.requests.memory + " \n Lim. RAM: " + .spec.containers[].resources.limits.memory + " \n Req. CPU: " + .spec.containers[].resources.requests.cpu + " \n Lim. CPU: " + .spec.containers[].resources.limits.cpu + " \n Req. Eph. DISK: " + .spec.containers[].resources.requests["ephemeral-storage"] + " \n Lim. Eph. DISK: " + .spec.containers[].resources.limits["ephemeral-storage"] + "\n"'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer  | jq -r '.items[] | .metadata.name + " \n Container name: " + .spec.containers[].name + " \n Req. RAM: " + .spec.containers[].resources.requests.memory + " \n Lim. RAM: " + .spec.containers[].resources.limits.memory + " \n Req. CPU: " + .spec.containers[].resources.requests.cpu + " \n Lim. CPU: " + .spec.containers[].resources.limits.cpu  + "\n"'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer  | jq -r '.items[] | .metadata.name + " \n Container name: " + .spec.containers[].name + " \n Req. RAM: " + .spec.containers[].resources.requests.memory + " \n Lim. RAM: " + .spec.containers[].resources.limits.memory + " Req. CPU: " + .spec.containers[].resources.requests.cpu + " \n Lim. CPU: " + .spec.containers[].resources.limits.cpu  + "\n"'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer  | jq -r '.items[] | .metadata.name + " \n Container name: " + .spec.containers[].name + " \n Req. RAM: " + .spec.containers[].resources.requests.memory + " \n Lim. RAM: " + .spec.containers[].resources.limits.memory + " Req. CPU: " + .spec.containers[].resources.requests.cpu + " Lim. CPU: " + .spec.containers[].resources.limits.cpu  + "\n"'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer  | jq -r '.items[] | .metadata.name + "  Container name: " + .spec.containers[].name + "  Req. RAM: " + .spec.containers[].resources.requests.memory + " Lim. RAM: " + .spec.containers[].resources.limits.memory + " Req. CPU: " + .spec.containers[].resources.requests.cpu + " Lim. CPU: " + .spec.containers[].resources.limits.cpu  + "\n"'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer  | jq -r '.items[] | .metadata.name + "  Container name: " + .spec.containers[].name + "  Req. RAM: " + .spec.containers[].resources.requests.memory + " Lim. RAM: " + .spec.containers[].resources.limits.memory + " Req. CPU: " + .spec.containers[].resources.requests.cpu + " Lim. CPU: " + .spec.containers[].resources.limits.cpu  + "\n"' | column -t
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer  | jq -r '.items[] | .metadata.name + "  Container: " + .spec.containers[].name + "  Req. RAM: " + .spec.containers[].resources.requests.memory + " Lim. RAM: " + .spec.containers[].resources.limits.memory + " Req. CPU: " + .spec.containers[].resources.requests.cpu + " Lim. CPU: " + .spec.containers[].resources.limits.cpu  + "\n"' | column -t
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer  | jq -r '.items[] | .metadata.name + "  Container: " + .spec.containers[].name + "  Req.RAM: " + .spec.containers[].resources.requests.memory + " Lim.RAM: " + .spec.containers[].resources.limits.memory + " Req.CPU: " + .spec.containers[].resources.requests.cpu + " Lim.CPU: " + .spec.containers[].resources.limits.cpu  + "\n"' | column -t
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer  | jq -r '.items[] | .metadata.name + "  Container: " + .spec.containers[].name + "  Req.RAM: " + .spec.containers[].resources.requests.memory + " Lim.RAM: " + .spec.containers[].resources.limits.memory + " Req.CPU: " + .spec.containers[].resources.requests.cpu + " Lim.CPU: " + .spec.containers[].resources.limits.cpu  + "\n"' | column -t | sort -k5,5n
kubectl get po --context cs-prod2 -o json --field-selector="status.phase!=Running"
kubectl get po --context cs-prod4 --field-selector="status.phase=Running"
kubectl get po --context cs-prod4 --field-selector="status.phase!=Running"
kubectl get po --context cs-prod4 -o json --field-selector="status.phase!=Running"
kubectl get po --context cs-prod4 -o json --field-selector="status.phase!=Running" | tee dd && code dd
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer  | jq -r '.items[] | .spec.containers[].env'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[].name'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.name,.valueFrom)'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.name,.valueFrom| join("|))'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.name, .valueFrom | join("|))'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.name, (.valueFrom | join("|)))'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| [.name, (.valueFrom | join("|)])'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| [.name, (.valueFrom | join("|")])'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| {.name, (.valueFrom | join("|")})'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.name, (.valueFrom | join("|")))'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| [.name, (.valueFrom | tostring)]'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.name, (.valueFrom | tostring))'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.name, (.valueFrom | .[0]?)'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.name, (.valueFrom | [0])'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.name, (.valueFrom[0])'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.name, (.valueFrom | keys)'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.name, (.valueFrom | keys))'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.name, (.valueFrom | keys[0]))'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.valueFrom | to_entries | value)'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.valueFrom | to_entries | .value)'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.valueFrom | to_entries | .value | tostring)'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.valueFrom | with_entries(.value | tostring))'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.valueFrom | with_entries(.value | tostring ))'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.valueFrom | with_entries(.value | join("|") ))'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.valueFrom | with_entries(.value))'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.valueFrom | with_entries )'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[]| (.valueFrom | to_entries )'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (.valueFrom  )'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (.valueFrom | keys[] as $k | "\($k)|\(.[$k])" )'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (.name, .valueFrom | keys[] as $k | "\($k)|\(.[$k])" )'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [.name, .valueFrom | keys[] as $k | "\($k)|\(.[$k])" ]'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [.name, (.valueFrom | keys[] as $k | "\($k)|\(.[$k])") ]'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | .name, (.valueFrom | keys[] as $k | "\($k)|\(.[$k])") '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (.name, (.valueFrom | keys[] as $k | "\($k)|\(.[$k])")) | join("1") '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (.name, (.valueFrom | keys[] as $k | "\($k)|\(.[$k])"))  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (.name, (.valueFrom | keys[] as $k | "\($k)|\(.[$k]| tostring )"))  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (.name, (.valueFrom | keys[] as $k | "\($k)|\(.[$k] | select(.key)  )"))  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (.name, (.valueFrom | keys[] as $k | "\($k)| (\(.[$k] | select(.key))  )"))  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (.name, (.valueFrom | keys[] as $k | "\($k)| \(.[$k])"))  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (.name, (.valueFrom | keys[] as $k | "\(.[$k])"))  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (.name, (.valueFrom ))  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (.name, (.valueFrom | keys_unsorted[] as $k | [$k, .[$k]] | join("|")))  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom | keys_unsorted[] as $k | [$k, .[$k]] | join("|"))  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom)  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom | keys)  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom | keys_unsorted[] as $k )  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom | keys_unsorted as $k )  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom | keys as $k )  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom | keys )  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom | keys as $k | $k )  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom | keys as $k | [$k, .[$k]] )  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom | keys as $k | $k, .[$k] )  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom | keys as $k |  .[$k]? )  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom | keys as $k | .[$k]? )  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom | keys as $k | $k, .[$k]? )  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom | keys as $k | $k, .[$k]? |  join("|") )  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  .name , (.valueFrom | keys as $k | $k, .[$k]?  |  join("|") )  '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ .name , (.valueFrom | keys as $k | $k, .[$k]?  |  join("|") ) ] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ .name , (.valueFrom  as $dict | keys  ) ] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ .name , (.valueFrom  as $dict | keys as $k | $dict[.key]  ) ] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ .name , (.valueFrom  as $dict | keys as $k | $dict | tostring ) ] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ .name , (.valueFrom  as $dict | keys as $k | $dict | join("F") ) ] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ .name , (.valueFrom  as $dict | keys as $k | $dict  ) ] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ .name , (.valueFrom  as $dict | keys as $k | $dict | fromjson  ) ] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ .name , (.valueFrom  as $dict | keys as $k | $dict | keys  ) ] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ .name , (.valueFrom  as $dict | $dict | keys  ) ] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ .name , (.valueFrom  as $dict | $dict | keys as $k | $k, $dict[.key] ) ] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ .name , (.valueFrom  as $dict | $dict | keys as $k | $k, $dict[$k] ) ] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ .name , (.valueFrom  as $dict | $dict |  with_entries( {value: $dict[.key], key: (.value|tostring) }) ] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ .name , (.valueFrom  as $dict |  with_entries( {value: $dict[.key], key: (.value|tostring)}) ] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom  as $dict |  with_entries( {value: $dict[.key], key: (.value|tostring)}) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom  as $dict | with_entries( {value: $dict[.key], key: (.value|tostring)})'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom  as $dict | with_entries( {value: $dict[.key], key: (.value|tostring)}))'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom  as $dict | with_entries( {value: $dict[.key], key: (.value)}))'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom  as $dict | with_entries( {value: $dict[.key], key: (.value| tostring )}))'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom  as $dict | with_entries( {key: (.value| tostring )}))'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom  as $dict | $dict[.key])'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom  as $dict | $dict[.key]?)'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom  as $dict | $dict[.value]?)'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom  as $dict | $dict)'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom  as $dict | keys )'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  (.valueFrom  as $dict | values )'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  [(.valueFrom  as $dict | values )]'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | .valueFrom  as $dict | values '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | .valueFrom  as $dict | values | map({(.name): .valueFrom}) | add '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | .valueFrom  as $dict | values[] | map({(.name): .valueFrom}) | add '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | values '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | values["name] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | values["name"] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (values["name"] ,values["valueFrom"]} '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | {values["name"] ,values["valueFrom"]} '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (values["name"] ,values["valueFrom"]) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (values["name"] ,values["valueFrom"] | keys) '
tail -f /tmp/1  2>/dev/null
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (values["name"] ,(values["valueFrom"] | keys)) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (values["name"] ,(values["valueFrom"] as SA | keys[] as k | $SA[$k] )) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (values["name"] ,(values["valueFrom"] as SA | keys[] as k | $SA[k] )) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (values["name"] ,(values["valueFrom"] as SA | keys[] as k | SA[k] )) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (values["name"] ,(values["valueFrom"] as $SA | keys[] as $k | $SA[$k] )) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (values["name"] ,(values["valueFrom"] as $SA | keys[] as $k | $k )) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (values["name"] ,(values["valueFrom"] as $SA | keys[] as $k | $SA )) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | (values["name"] ,(values["valueFrom"] as $SA  | $SA| tostring  )) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,(values["valueFrom"] as $SA  | $SA| tostring  )] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,(values["valueFrom"] as $SA  | $SA| tostring  )] | @tsv'
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,(values["valueFrom"] as $SA  | $SA| tostring  )] | @tsv' | column -t
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,(values["valueFrom"] as $SA  | $SA| tostring  )] | @tsv' | column -t | sort
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,(values["valueFrom"] as $SA  | $SA| join("|")  )] | @tsv' | column -t | sort
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,(values["valueFrom"] as $SA  | $SA| flattern  )] | @tsv' | column -t | sort
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,(values["valueFrom"] as $SA  | $SA| @text  )] | @tsv' | column -t | sort
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,(values["valueFrom"] as $SA  | $SA| @text  )] | @tsv' 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,(values["valueFrom"] as $SA  | $SA| keys_unsorted[] as $k | [$k, .[$k]] | join("|") )] | @tsv' 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,(values["valueFrom"] as $SA  | keys_unsorted[] as $k | [$k, .[$k]] | join("|") )] | @tsv' 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,(values["valueFrom"] as $SA  | keys_unsorted[] as $k | [$k?, .[$k]?] | join("|") )] | @tsv' 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,(values["valueFrom"] as $SA  )] | @tsv' 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,(values["valueFrom"] as $SA ] | @tsv' 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,(values["valueFrom"]  ] | @tsv' 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ values["name"] ,values["valueFrom"]  ] | @tsv' 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ values["name"] ,values["valueFrom"]  ]' 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ values["name"] , values["valueFrom"] | tostring   ]' 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ values["name"] , values["valueFrom"] | @text   ]' 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ values["name"] , (values["valueFrom"] | @text)   ]' 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ values["name"] , (values["valueFrom"] | @text)   ]' | column -t
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ values["name"] , (values["valueFrom"] | @text)   ] | @tsv' | column -t
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ values["name"] , (values["valueFrom"] | keys)   ] | @tsv' | column -t
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ values["name"] , (values["valueFrom"][0])   ] | @tsv' | column -t
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ values["name"] , (values["valueFrom"] |. as [$V, $K])   ] | @tsv' | column -t
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ values["name"] , (values["valueFrom"] |. as [$V, $K]))   ] | @tsv' | column -t
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ values["name"] , (values["valueFrom"] as [$V, $K])) 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ values["name"] , (values["valueFrom"] as [$V, $K])) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ values["name"] , (values["valueFrom"] as [$V, $K])] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  values["name"] , (values["valueFrom"] as [$V, $K]) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  values["name"] , (values["valueFrom"] as $V) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  values["name"] , (values["valueFrom"] ) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  values["name"] , (values["valueFrom"] | to_entries) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  values["name"] , (values["valueFrom"] | to_entries | .value) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  values["name"] , (values["valueFrom"] | to_entries[] | .value) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  values["name"] , (values["valueFrom"] | to_entries[] | .value | tostring ) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] |  values["name"] , (values["valueFrom"] | to_entries[] | .value ) '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [ values["name"] , (values["valueFrom"] . as [$V, $K])   ] | @tsv' | column -t
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,(values["valueFrom"] )] | @tsv' | column -t | sort
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,values["valueFrom"] ] | @tsv' | column -t | sort
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | values["name"] ,values["valueFrom"] ' | column -t | sort
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | values["name"] ,values["valueFrom"] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,values["valueFrom"]|tostring] '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,values["valueFrom"]|tostring] | @tsv '
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,values["valueFrom"]|tostring] | @tsv ' | column -t 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,gsub(values["valueFrom"]|tostring) ] | @tsv ' | column -t 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,values["valueFrom"]|tostring ] | @tsv ' | column -t 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,values["valueFrom"]|tostring  | sub("{"; "")] | @tsv ' | column -t 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,values["valueFrom"]|tostring  | gsub("{"; "")] | @tsv ' | column -t 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,values["valueFrom"]|tostring  | gsub("{|}"; "")] | @tsv ' | column -t 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,values["valueFrom"]|tostring  | gsub("{|}|\""; "")] | @tsv ' | column -t 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,values["valueFrom"]|tostring  | gsub("{|}|\""; "")] | @tsv ' | column -t  | awk 'cnt[$2]++{if (cnt[$1]==2) print prev[$1]; print} {prev[$1]=$0}' 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,values["valueFrom"]|tostring  | gsub("{|}|\""; "")] | @tsv ' | column -t  | awk 'cnt[$]++{if (cnt[$1]==2) print prev[$1]; print} {prev[$1]=$0}' 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,values["valueFrom"]|tostring  | gsub("{|}|\""; "")] | @tsv ' | column -t  | awk 'cnt[$1]++{if (cnt[$1]==2) print prev[$1]; print} {prev[$1]=$0}' 
kubectl get pods --context cs-staging -l app=edge
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,values["valueFrom"]|tostring  | gsub("{|}|\""; "")] | @tsv ' | column -t  | sort -k1 |  awk 'cnt[$1]++{if (cnt[$1]==2) print prev[$1]; print} {prev[$1]=$0}' 
uR
dYY 1624976669667
e
curl -s -k "https://10.223.14.111:34296/prometheus" | grep "jsse-nio-8443"
while true ;do curl -s -k "https://10.223.14.111:34296/prometheus" | grep "jsse-nio-8443";sleep 10;done
while true ;do curl -s -k "https://10.223.14.111:34296/prometheus" | grep "currentThreadsBusy";sleep 10;done
while true ;do curl -s -k "https://10.223.14.111:34296/prometheus" | grep "currentThreadsBusy";date ; sleep 10;done
while true ;do curl -s -k "https://10.223.14.111:34296/prometheus" | grep "currentThreadsBusy.*$";date ; sleep 10;done
exit
kubectl get pods  -l 'version=2.3.0,app=edge' --context cs-dev 
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-dev 
uR ded
dYY 1625037463034
kubectl get pods  -l 'version=2.3.0,app=edge' --context cs-staging
kubectl get pods --context cs-staging
kubectl get pods --context cs-staging -l app=edge
kubectl get pods --context cs-staging -l app=edge _l routeoffer
kubectl get pods --context cs-staging -l app=edge -L routeoffer
kubectl get pods --context cs-staging -l app=hollow-producer
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-dev | grep --color=none -oP "Status Code=429" | nl
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging | grep --color=none -oP "Status Code=429" | nl
dYY 1625038102109
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging -i ".*429.*"
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging -i ".*429 ==.*"
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging
v
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,values["valueFrom"]|tostring  | gsub("{|}|\""; "")] | @tsv ' | column -t  | awk 'cnt[$2]++{if (cnt[$1]==2) print prev[$1]; print} {prev[$1]=$0}' 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,values["valueFrom"]|tostring  | gsub("{|}|\""; "")] | @tsv ' | column -t  | awk 'cnt[$]++{if (cnt[$1]==2) print prev[$1]; print} {prev[$1]=$0}' 
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,values["valueFrom"]|tostring  | gsub("{|}|\""; "")] | @tsv ' | column -t  | awk 'cnt[$1]++{if (cnt[$1]==2) print prev[$1]; print} {prev[$1]=$0}' 
kubectl get pods --context cs-staging -l app=edge
kubectl get pods -o json --context cs-prod2 -l app=hollow-producer,version=1.2.4  | jq -r '.items[] | .spec.containers[].env[] | [values["name"] ,values["valueFrom"]|tostring  | gsub("{|}|\""; "")] | @tsv ' | column -t  | sort -k1 |  awk 'cnt[$1]++{if (cnt[$1]==2) print prev[$1]; print} {prev[$1]=$0}' 
uR
dYY 1624976669667
e
M=hp uR
M=hp uR rhp
MEM=36 bash -x patchD name=hollow-producer-2-0-4
seq 1 3 | xargs -I{} -n 1 -P 4 kubectl patch deployment --context cs-prod{} hollow-producer-2-0-4 --patch="$(cat ~/tmp/test.yml)"
kubectl get pods -l app=hollow-producer --context cs-prod2
myS -t  --tail 50 -l 'version=372-0-3' --context cs-prod2 
L
myS -t  --tail 50 -l 'version=2.0.4' --context cs-prod2 
myS -t  --tail 50 -l 'version=370.0.3' --context cs-prod2 
myS -t  --tail 50 -l 'version=372.0.3' --context cs-prod2 
exit
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging -i ".*429 ==.*"
v
sudo vim /etc/hosts
ping router.asus.com
ifconfig
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging | grep "Response Time="
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-dev
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging
kubectl get pods --context cs-dev -l app=hollow-producer
exit
while true ;do curl -s -k "https://10.223.14.111:34296/prometheus" | grep "jsse-nio-8443";sleep 10;done
while true ;do curl -s -k "https://10.223.14.111:34296/prometheus" | grep "currentThreadsBusy";sleep 10;done
while true ;do curl -s -k "https://10.223.14.111:34296/prometheus" | grep "currentThreadsBusy";date ; sleep 10;done
while true ;do curl -s -k "https://10.223.14.111:34296/prometheus" | grep "currentThreadsBusy.*$";date ; sleep 10;done
L
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq ".keys"
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq ".keys[]"
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq "."
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq ".| keys"
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq ".| values"
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq ".98a80281-f587-d307-7e97-16a638f2fda7 "
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq ".98a80281-f587-d307-7e97-16a638f2fda7"
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq '.98a80281-f587-d307-7e97-16a638f2fda7'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq '.| "98a80281-f587-d307-7e97-16a638f2fda7"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq '."98a80281-f587-d307-7e97-16a638f2fda7"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq '."98a80281-f587-d307-7e97-16a638f2fda7"[]'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq '."98a80281-f587-d307-7e97-16a638f2fda7"[].previous'
dYY 1625576400000
dYY 1625578200000
dYY 1625580000000
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."98a80281-f587-d307-7e97-16a638f2fda7"[].previous'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."98a80281-f587-d307-7e97-16a638f2fda7"[].previous.startTime'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."98a80281-f587-d307-7e97-16a638f2fda7"[].previous.startDateTime'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."98a80281-f587-d307-7e97-16a638f2fda7"[].previous.startDateTime |= todateiso8601'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."98a80281-f587-d307-7e97-16a638f2fda7"[].current.startDateTime |= todateiso8601'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c 'walk(.startDateTime?="XXX")'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c 'walk(.startDateTime?="XXX" | .endDateTime?="Java") '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c 'walk(.startDateTime?|=todateiso8601 | .endDateTime?="Java") '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c 'walk(.startDateTime|=todateiso8601 | .endDateTime?="Java") '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" |   
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."98a80281-f587-d307-7e97-16a638f2fda7"[].current.startDateTime |=  (tonumber | todateiso8601)'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."98a80281-f587-d307-7e97-16a638f2fda7"[]'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."98a80281-f587-d307-7e97-16a638f2fda7"[]  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (. | todateiso8601))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."98a80281-f587-d307-7e97-16a638f2fda7"  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (. | todateiso8601))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."98a80281-f587-d307-7e97-16a638f2fda7"  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (. / 1000 | strftime("%Y-%m-%d %H:%M UTC")' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."98a80281-f587-d307-7e97-16a638f2fda7"  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (. / 1000 | strftime("%Y-%m-%d %H:%M UTC"))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."98a80281-f587-d307-7e97-16a638f2fda7"  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."98a80281-f587-d307-7e97-16a638f2fda7"  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."98a80281-f587-d307-7e97-16a638f2fda7"  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))'  | jq .
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq '.keys'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq '.| keys'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=11625764-ad95-94ab-d1bb-b22a0fef70a3" | jq '.| keys'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=11625764-ad95-94ab-d1bb-b22a0fef70a3" | jq .
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."11625764-ad95-94ab-d1bb-b22a0fef70a3"  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))'  | jq .
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=424a2a81-e591-ef20-1169-f15b4e87d335" | jq -c '."424a2a81-e591-ef20-1169-f15b4e87d335"  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))'  | jq .
myS -t  --tail 5 -l 'version=2.0.4' --context cs-prod2 
exit
exit
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=424a2a81-e591-ef20-1169-f15b4e87d335" | jq -c '."424a2a81-e591-ef20-1169-f15b4e87d335"  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))'  | jq .
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=424a2a81-e591-ef20-1169-f15b4e87d335" | jq -c '. | keys[] as $k | "\($k), \(.[$k] | .ip)"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=424a2a81-e591-ef20-1169-f15b4e87d335" | jq -c '. | keys[] as $k | "\($k), \(.[$k] | .previous)"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=424a2a81-e591-ef20-1169-f15b4e87d335" | jq -c '. | keys[] as $k | "\($k), \(.[$k] | .previous?)"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -c '. | keys[] as $k | "\($k), \(.[$k] | .previous?)"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -c '. | keys[] as $k | "\($k), \(.[$k] )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -c '. | keys[] as $k | "\($k), \(.[$k] | .previous )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -c '. | keys[] as $k | "\(.[$k] | .previous )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -c '. | keys[] as $k | "\(.[$k] | .[].previous )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -c '. | keys[] as $k | "\(.[$k] | .[](.previous,.current) )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -r '. | keys[] as $k | "\(.[$k] | .[]| (.previous,.current) )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -r '. | keys[] as $k | "\(.[$k] | .[]|  map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))' )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -r '. | keys[] as $k | "\(.[$k] | .[]|  map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))' )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -r '. | keys[] as $k | "\(.[$k] | .[]|  map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")' )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -r '. | keys[] as $k | "\(.[$k] | .[]|  map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime('%Y-%m-%d %H:%M UTC')' )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -r '. | keys[] as $k | "\(.[$k] | .[]|  map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime('%Y-%m-%d %H:%M UTC')' "'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -r '. | keys[] as $k | "\(.[$k] | .[]|  map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime('%Y-%m-%d %H:%M UTC')' '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -r '. | keys[] as $k | "\(.[$k] | .[]|  map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime('%Y-%m-%d %H:%M UTC')' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -r '. | keys[] as $k | "\(.[$k]" | .[]|  map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime('%Y-%m-%d %H:%M UTC')' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -r '. | keys[] as $k | "\(.[$k]" | .[]|  map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -r '. | keys[] as $k | "\(.[$k]" | .[]|  map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) ' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -r '. | keys[] as $k | "\(.[$k]" | .[] ' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -r '. | keys[] as $k | "\(.[$k]"  ' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -c '. | keys[] as $k | "\(.[$k] | .[]| (.previous,.current) )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -c '. | keys[] as $k | "\(.[$k] | .[] | (.previous,.current) )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -c '. | keys[] as $k | "\(.[$k] | .[] | (.previous,.current) )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -c '. | keys[] as $k | "\(.[$k] | .[] | (.previous,.current) )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -c '. | keys[] as $k | "\(.[$k] | .[] )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. | keys[] as $k | "\(.[$k] | .[] )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. | keys[] as $k | "\(.[$k] | . )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. | keys[] as $k | "\(.[$k] | .[]| (.previous) )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. | keys[] as $k | "\(.[$k] | .[]| (.previous,.current) )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. | keys[] as $k | "\(.$k | (.previous,.current) )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. | keys[] as $k | "\(.$k) )"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. | keys[] as $k | "\(.$k) "'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. | keys[] as $k | .$k "'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '.  "'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '.'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '.| keys[] as $k | "\(.$k)"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '.| keys[] as $k | "\.$k"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '.| keys[] as $k | .$k'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '.| keys[] as $k | [.$k]'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '.| keys[] as $k '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '.| keys[]  '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. as $dict | keys[] as $k | $dict[$k] | .[] '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. as $dict | keys[] as $k | $dict[$k] '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. as $dict | keys[] as $k | $k '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. as $dict | keys[] as $k | $dict[$k]'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. as $dict | keys[] as $k | $dict[$k] | .[] |  map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))''
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. as $dict | keys[] as $k | $dict[$k] | .[] |  map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. as $dict | keys[] as $k | $dict[$k] | .[]'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -r '. as $dict | keys[] as $k | $dict[$k] | .[] '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -r '. as $dict | keys[] as $k | $dict[$k] | . '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -r '. as $dict | keys[] as $k | $dict[$k] | . []'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -r '. as $dict | keys[] as $k | $dict[$k] | .[] | (.previous,.current)'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -r '. as $dict | keys[] as $k | $dict[$k] | .[] | (.previous.startDateTime,.current.startDateTime) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))' '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -r '. as $dict | keys[] as $k | $dict[$k] | .[] | (.previous.startDateTime,.current.startDateTime) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -r '. as $dict | keys[] as $k | $dict[$k] | .[] | (.previous.startDateTime,.current.startDateTime) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -r '. as $dict | keys[] as $k | $dict[$k] | .[] | (.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -r '. as $dict | keys[] as $k | $dict[$k] | . | (.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. as $dict | keys[] as $k | $dict[$k] | .[] | (.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=8b70646b-3188-34c4-b5aa-8dd052e3c090"  | jq -r '. as $dict | keys[] as $k | $dict[$k] | .[] | (.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=8b70646b-3188-34c4-b5aa-8dd052e3c090"  | jq -rc '. as $dict | keys[] as $k | $dict[$k] | .[] | (.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=8bef3b8f-2126-29ea-5497-c660563de900"  | jq -rc '. as $dict | keys[] as $k | $dict[$k] | .[] | (.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=8bef3b8f-2126-29ea-5497-c660563de900"  | jq -r '. as $dict | keys[] as $k | $dict[$k] | .[] | (.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=8bef3b8f-2126-29ea-5497-c660563de900"  | jq -r '. as $dict | keys[] as $k | $dict[$k] | .[] | (.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))'
L
cd /tmp
gC $(https://egbitbucket.dtvops.net/projects/CS/repos/hollow-producer/browse)
gC $BB(https://egbitbucket.dtvops.net/projects/CS/repos/hollow-producer/browse)
l
rm -rvf hollow-producer/
gC $(BB https://egbitbucket.dtvops.net/projects/CS/repos/hollow-producer/browse)
i
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -r '. | keys[] as $k | "\(.[$k]" | .[]|  map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -r '. | keys[] as $k | "\(.[$k]" | .[]|  map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) ' 
e
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -r '. | keys[] as $k | "\(.[$k]" | .[]|  map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) ' 
e
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=8bef3b8f-2126-29ea-5497-c660563de900"  | jq -r '. as $dict | keys[] as $k | $dict[$k] | .[] | (.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))' 
;6~
;
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. as $dict | keys[] as $k | $dict[$k] | .[] | (.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -r '. as $dict | keys[] as $k | $dict[$k] | .[] | (.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))' 
i
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -r '. | keys[] as $k | "\(.[$k]" | .[]|  map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) ' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=ee64f5eb-1602-2931-c841-9cb2f4c14fd2" | jq -r '. | keys[] as $k | "\(.[$k]" | .[]|  map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=8bef3b8f-2126-29ea-5497-c660563de900"  | jq -r '. as $dict | keys[] as $k | $dict[$k] | .[] | (.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -r '. as $dict | keys[] as $k | $dict[$k] | .[] | (.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. as $dict | keys[] as $k | $dict[$k] | .[] | (.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -rc '. | values'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps"  | jq -r '. | values'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '. | values'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '. as $dict | keys as $k | $k'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '. as $dict | keys as $k | $dict[0]'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '. as $dict | keys as $k | $dict.$k'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '. as $dict | keys as $k | $dict[$k]'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '. as $dict | keys as $k | $dict\[$k\]'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '. as $dict | keys as $k | $dict'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '. as $dict | keys[] as $k  | "\($k), \(.[$k]'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.  | keys[] as $k  | "\($k), \(.[$k] '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.  | keys[] as $k  | "\($k), \(.[$k]" '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.  | keys[] as $k  | ($k), \(.[$k] '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.  | keys[] as $k  | ($k), (.[$k] '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.  | keys[] as $k  | ($k) '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.  | keys[] as $k  | | "\($k)|\(.[$k]) '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.  | keys[] as $k  | | "\($k)|\(.[$k])" '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.  | keys[] as $k  |  "\($k)|\(.[$k])" '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.  | keys[] as $k  |  "\(.[$k])" '
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.  | keys[] as $k  |  "\(.[$k])" ' | jq .
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.  | keys[] as $k  |  "\(.[$k])"'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.  | keys[] as $k  |  "\(.[$k])" | [].previous'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.  | keys[] as $k  |  "\(.[$k])" | []| .previous'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.  | keys[] as $k  |  "\(.[$k])" | .[]| .previous'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.  | keys[] as $k  |  "\(.[$k])" |  .previous'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.  | keys[] as $k  |  "\(.[$k])" |  .[]'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.  | keys[] as $k  |  .[$k] |  .[]'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '.  | keys[] as $k  |  .[$k] |  .[].previous'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '. | keys[] as $k  |  .[$k] |  .[].previous |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=a34d2467-a699-37ad-dc90-7b1b9b40f889"  | jq -r '. | keys[] as $k  |  .[$k] |  .[].previous.startDateTime |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."98a80281-f587-d307-7e97-16a638f2fda7"  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))'  | jq .
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."98a80281-f587-d307-7e97-16a638f2fda7"  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."a34d2467-a699-37ad-dc90-7b1b9b40f889"  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -c '."a34d2467-a699-37ad-dc90-7b1b9b40f889"  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))' | jq .
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -r '."a34d2467-a699-37ad-dc90-7b1b9b40f889"  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -r '. | values"  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -r '. | values  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -r '. | values[]  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -rc '. | values[]  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))' 
e
att
myS -t  --tail 50 -l 'version=370.0.3' --context cs-prod2 
myS -t  --tail 50 -l 'version=372.0.3' --context cs-prod2 
configMap hollow-producer-372-0-3 cs-prod2 | tee /tmp/SanchuVarkey/1.txt
configMap hollow-producer-372-3-0 cs-prod2
configMap edge-372-3-0 cs-prod2
kubectl get pods -l name=edge-372-3-0 --context cs-prod2
cd ~/.m2
l
jq '. | to_entries[]' overLaps.json 
jq '. | to_entries[] | select(.key) ' overLaps.json 
jq '. | to_entries[] | select(.key)' overLaps.json 
jq '. | to_entries[] | select(.value)' overLaps.json 
jq '. | to_entries[] | select(.value) | "\(.key)|\(.value)" ' overLaps.json 
jq -c 'walk(.startDateTime? |= todateiso8601 | .endDateTime?="Java") ' overLaps.json 
jq -c 'walk(.startDateTime.value |= todateiso8601 | .endDateTime?="Java") ' overLaps.json 
jq -c 'walk(.startDateTime?.value |= todateiso8601 | .endDateTime?="Java") ' overLaps.json 
jq -c 'walk(.startDateTime |= todateiso8601 | .endDateTime?="Java") ' overLaps.json 
jq -c 'walk(.startDateTime? = todateiso8601 | .endDateTime?="Java") ' overLaps.json 
jq -c 'walk(.startDateTime? = "ts" | .endDateTime?="Java") ' overLaps.json 
jq 'walk(if type == "object" then with_entries(if .value == "MONTH" then .value = "YEAR" else . end)   else . end)' overLaps.json 
jq 'walk(if type == "object" then with_entries(if .key == "startDateTime" then .value = "YEAR" else . end)   else . end)' overLaps.json 
jq 'walk(if type == "object" then with_entries(if .key == "startDateTime" then .value !=  (./1000 | strftime("%Y-%m-%d %H:%M UTC")  else . end)   else . end)' overLaps.json 
jq 'walk(if type == "object" then with_entries(if .key == "startDateTime" then .value !=  (./1000 | strftime("%Y-%m-%d %H:%M UTC"))  else . end)   else . end)' overLaps.json 
jq 'walk(if type == "object" then with_entries(if .key == "startDateTime" then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))  else . end)   else . end)' overLaps.json 
jq 'walk(if type == "object" then with_entries(if endswith(.key)  then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))  else . end)   else . end)' overLaps.json 
jq 'walk(if type == "object" then with_entries(if .key | endswith("DateTime")  then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC"))  else . end)   else . end)' overLaps.json 
jq 'walk(if type == "object" then with_entries(if .key | endswith("DateTime")  then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")) end)   else . end)' overLaps.json 
jq 'walk(if type == "object" then with_entries(if .key | endswith("DateTime")  then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")) end) end)' overLaps.json 
exit
kC og.request.http.status.higher.than
exit
dYY 624541499343
dYY 1624541499343
dYY 1625092372078
dYY 1624541499343
dYY 1625092372078
uR
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq '.[]| length'
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq '.| length'
kp cs-prod1 -l app=edge -L routeoffer
kp cs-prod1 -l app=edge -L routeoffer,version,app
kp cs-prod1 -l app=edge -L routeoffer,version,app,name
kp cs-prod1 -l app=edge -L routeoffer,version,app,name | grep -v "2-10!
kp cs-prod1 -l app=edge -L routeoffer,version,app,name | grep -v "2-10"
kp cs-prod2 -l app=edge -L routeoffer,version,app,name | grep -v "2-10"
kp cs-prod3 -l app=edge -L routeoffer,version,app,name | grep -v "2-10"
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -rc '. | values[]  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" 
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq '.'
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq '.id'
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq '.[].id'
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq -r '.[].id'
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq -r '.[] '
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq -r '.[] | keys_unsorted[] as $k | [$k, .[$k]] | join("|")'
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq -r '.[] | map({(.id): .status}) | add'
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq -r '. | map((.id)|.status) | add'
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq -r '. | map((.id)|.status) '
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq -r '. | map({(.id): .status}) | add'
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq -r '. | map({(.id): .status}) | add |  keys_unsorted[] as $k | [$k, .[$k]] | join("|")'
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq -r '. | map({(.id): .status}) | add |  keys_unsorted[] as $k | [$k, .[$k]] | join("|")' | sort
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq -r '. | map({(.id): .status}) | add |  keys_unsorted[] as $k | [$k, .[$k]] | join("|")' | sort 
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq -r '. | map({(.id): .status}) | add |  keys_unsorted[] as $k | [$k, .[$k]] | join("|")' | sort  | nl
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq -r '. | map({(.id): .status}) | add |  keys_unsorted[] as $k | [$k, .[$k]] | join("|")' | sort |  awk 'cnt[$1]++{if (cnt[$1]==2) print prev[$1]; print} {prev[$1]=$0}' 
e
jq 'walk(if type == "object" then with_entries(if .key | endswith("DateTime")  then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")) end)   else . end)' overLaps.json 
jq 'walk(if type == "object" then with_entries(if .key | endswith("DateTime")  then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")) end) end)' overLaps.json 
exit
kC og.request.http.status.higher.than
exit
kubectl get pods --context cs-staging -l app=edge
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging | grep "Response Time="
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging 
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging  | grep "e45d1757-4b50-96c8-3f80-2f0d8e7ab375"
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging  -i  ".*e45d1757-4b50-96c8-3f80-2f0d8e7ab375.*"
uR
MEM=36 bash -x patchD name=hollow-producer-2-0-4
seq 1 3 | xargs -I{} -n 1 -P 4 kubectl patch deployment --context cs-prod{} hollow-producer-2-0-4 --patch="$(cat ~/tmp/test.yml)"
echo 2 |xargs -I{} -n 1 -P 4 mKube get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"|"}{.metadata.creationTimestamp}{"|"}{.status.containerStatuses[*].restartCount}{"|"}{.status.containerStatuses[*].lastState.terminated.exitCode}{"|"}{.status.containerStatuses[*].lastState.terminated.reason}{"|"}{.status.containerStatuses[*].lastState.terminated.startedAt}{"|"}{.status.containerStatuses[*].lastState.terminated.finishedAt}{"|"}{.metadata.labels.routeoffer}{"|"}{.metadata.labels.version}{"|"}{.spec.containers[].resources.limits.cpu}{"|"}{.spec.containers[].resources.limits.memory}{"\n"}{end}' --context cs-prod{} -l app=hollow-producer  | column -t -s"|" -o "      "| sort -k3,3n
kubectl get pods -l app=hollow-producer --context cs-prod2
myS -t  --tail 5 -l 'version=2.0.4' --context cs-prod2 
myS -t  --tail 1 -l 'version in (2.2.10)' --context cs-prod2
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq -rc '. | values[]  | map((.previous.startDateTime, .previous.endDateTime, .current.startDateTime, .current.endDateTime ) |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")))' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=8653742c-ddfd-32d3-e9c9-8c3489892ff6" | jq 'walk(if type == "object" then with_entries(if .key | endswith("DateTime")  then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")) end) end)'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=b0328b98-e2ac-11b8-fbdd-621a71452426" | jq 'walk(if type == "object" then with_entries(if .key | endswith("DateTime")  then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")) end) end)'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps?channelId=2cb67cc0-5cbd-c28e-5cb3-efd2c063ab05" | jq 'walk(if type == "object" then with_entries(if .key | endswith("DateTime")  then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")) end) end)'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq 'walk(if type == "object" then with_entries(if .key | endswith("DateTime")  then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")) end) end)'
v
/home/svarkey/.nvm/versions/node/v15.12.0/bin/node /home/svarkey/dev/code/Personal/JavaS/Scrapper.js
node /home/svarkey/dev/code/Personal/JavaS/Scrapper.js
att
L
e
L
sudo apt-get update
sudo apt-get upgrade
rm -rvf /home/svarkey/.cache/JetBrains/IntelliJIdea2021.1/Maven
jps 
kill -9 109300
e
jps 
kill -9 109300
aws s3 ls s3://mybucket --recursive --human-readable --summarize
aws s3 ls s3://metadata-hollow-data --recursive --human-readable --summarize
aws s3 ls s3://metadata-hollow-data/catalogservice-dev-int-view --recursive --human-readable --summarize
aws s3 ls s3://metadata-hollow-data paths=catalogservice-dev-int-view --recursive --human-readable --summarize
aws s3 ls s3://metadata-hollow-data paths catalogservice-dev-int-view --recursive --human-readable --summarize
aws s3 ls s3://metadata-hollow-data catalogservice-dev-int-view --recursive --human-readable --summarize
aws s3 ls s3://metadata-hollow-data/catalogservice-dev-int-view |  jq -r '.Contents[].Key'
aws s3 ls s3://metadata-hollow-data/catalogservice-dev-int-view |  jq -r '.Contents[]'
aws s3 ls s3://metadata-hollow-data/catalogservice-dev-int-view |  jq '.Contents[]'
aws s3 ls s3://metadata-hollow-data/catalogservice-dev-int-view |  jq '.'
aws s3 ls s3://metadata-hollow-data/catalogservice-dev-int-view
aws s3 ls s3://metadata-hollow-data/catalogservice-dev-int-view --query "Contents[].{Key: Key}" --output text
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view" --query "Contents[].{Key: Key}" --output text
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view" --query "Contents[].{Key: Key, Size: Size,LastModified: LastModified}" --output text
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view" --query "Contents[].{Key: Key, Size: Size,LastModified: LastModified}" --output text | column -t
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "Contents[].{Key: Key, Size: Size,LastModified: LastModified}" --output text | column -t
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "Contents[?contains(LastModified, `YYYY-MM-DD`)].{Key: Key, Size: Size,LastModified: LastModified}" --output text | column -t
DATE=$(date +%Y-%m-%d)
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "Contents[?contains(LastModified, `'"$DATE"'`)].{Key: Key, Size: Size,LastModified: LastModified}" --output text | column -t
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "sort_by(Contents,&LastModified)" --output text | column -t
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "sort_by(Contents,&LastModified)"
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "sort_by(Contents,&LastModified)" | jq .
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "sort_by(Contents,&LastModified)" | jq '. | .Key,.Size'
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "sort_by(Contents,&LastModified)" | jq '.[] | .Key,.Size'
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "sort_by(Contents,&LastModified)" | jq '.[] | .Key,.Size | join("|")'
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "sort_by(Contents,&LastModified)" | jq '.[] | {.Key,.Size} | join("|")'
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "sort_by(Contents,&LastModified)" | jq '.[] | [.Key,.Size] | @tsv'
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "sort_by(Contents,&LastModified)" | jq '.[] | [.Key,.Size] | @csv'
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "sort_by(Contents,&LastModified)" | jq -r '.[] | [.Key,.Size] | @csv'
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "sort_by(Contents,&LastModified)" | jq -r '.[] | [.Key,.Size] | @csv' | column -t -s,
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "reverse(sort_by(Contents,&LastModified))" | jq -r '.[] | [.Key,.Size] | @csv' | column -t -s,
;6~
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "reverse(sort_by(Contents,&LastModified))" | jq -r '.[] |  keys_unsorted[] as $k | [$k, .[$k]] | join("|")'
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "reverse(sort_by(Contents,&LastModified))" | jq -r '.[] |  keys_unsorted[] as $k | [$k?, .[$k]?] | join("|")'
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "reverse(sort_by(Contents,&LastModified))" | jq -r '. | map({(.Key): .Size}) | add |  keys_unsorted[] as $k | [$k, .[$k]] | join("|")'
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "reverse(sort_by(Contents,&LastModified))" | jq -r '. | map({(.Key): .Size}) | add |  keys_unsorted[] as $k | [$k, .[$k]] | join("|")' | column -t -s"|"
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "reverse(sort_by(Contents,&LastModified))" --max-items 15 | jq -r '. | map({(.Key): .Size}) | add |  keys_unsorted[] as $k | [$k, .[$k]] | join("|")' | column -t -s"|"
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "reverse(sort_by(Contents,&LastModified))" --max-items 25 | jq -r '. | map({(.Key): .Size}) | add |  keys_unsorted[] as $k | [$k, .[$k]] | join("|")' 
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "reverse(sort_by(Contents,&LastModified))" | jq -r '. | map({(.Key): .Size}) | add |  keys_unsorted[] as $k | [$k, .[$k]] | join("|")' 
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "reverse(sort_by(Contents,&LastModified))" | jq -r '.[0:10] | map({(.Key): .Size}) | add |  keys_unsorted[] as $k | [$k, .[$k]] | join("|")' 
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "reverse(sort_by(Contents,&LastModified))" | jq -r '.[0:10] | map({(.Key): .Size}) | add |  keys_unsorted[] as $k | [$k, .[$k]] | join("|")' | column -t -s"|"
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "reverse(sort_by(Contents,&LastModified))" | jq -r '.[0:10] | map({(.Key): .Size}) | add |  keys_unsorted[] as $k | [$k, .[$k]] | join("|")' | column -t -s"|" -o "                     "
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq 'walk(if type == "object" then with_entries(if .key | endswith("DateTime")  then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")) end) end)'
e
myS -t  --tail 5 -l 'version=2.0.4' --context cs-dev
exit
myS -t  --tail 50 -l 'version=372.0.3' --context cs-prod2 
exit
cd '/home/svarkey/dev/code/IDS_New/CS/hollow-producer/'
MVN_VERSION=$(mvn -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec -q) && echo $MVN_VERSION
L
exit
exit
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq -r '. | map({(.id): .status}) | add |  keys_unsorted[] as $k | [$k, .[$k]] | join("|")' | sort | nl
curl -s "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel)&fields=id" | jq -r '. | map({(.id): .status}) | add |  keys_unsorted[] as $k | [$k, .[$k]] | join("|")' | sort |  awk 'cnt[$1]++{if (cnt[$1]==2) print prev[$1]; print} {prev[$1]=$0}' 
kp cs-edge-l app=edge -L routeoffer,version,app,name
kp cs-edge -l app=edge -L routeoffer,version,app,name
kp cs-dev -l app=edge -L routeoffer,version,app,name
kubectl describe pods -l name=edge-2-3-0
exec bash
kp cs-edge -l app=edge -L routeoffer,version,app,name
kp cs-dev -l app=edge -L routeoffer,version,app,name
kubectl describe pods -l name=edge-2-3-0
exec bash
curl --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel'
curl --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq .
curl --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq .id
curl --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq .[].id
curl --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq .[].id | grep 5d6a9934-91c2-4c8c-8147-c33b69e09d31
curl --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r  .[].id | grep 5d6a9934-91c2-4c8c-8147-c33b69e09d31
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r  .[].id | grep 5d6a9934-91c2-4c8c-8147-c33b69e09d31
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r .[].id | grep 5d6a9934-91c2-4c8c-8147-c33b69e09d31
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r .[].id | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r .[].id 
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r .[].id > /tmp/all_channels_response_1_jul.json 
grep 5d6a9934-91c2-4c8c-8147-c33b69e09d31 all_channels_response_1_jul.json 
grep 5d6a9934-91c2-4c8c-8147-c33b69e09d31 /tmp/all_channels_response_1_jul.json 
curl -s  --location --request GET "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel%20and%20id==5d6a9934-91c2-4c8c-8147-c33b69e09d31)" | jq -r .[].id > /tmp/all_channels_response_1_jul.json 
curl -s  --location --request GET "https://cs-catalogservice-edge-372-3-0.awsw2.cld.dtvops.net/api/nodes?filter=(subType==Channel%20and%20id==5d6a9934-91c2-4c8c-8147-c33b69e09d31)" > /tmp/all_channels_response_1_jul.json 
cat /tmp/all_channels_response_1_jul.json
cat /tmp/all_channels_response_1_jul.json | 'jq . | (.id,.subType)'
cat /tmp/all_channels_response_1_jul.json | jq '.[] | (.id,.subType)'
cat /tmp/all_channels_response_1_jul.json | jq '.[] | \"(.id)",\"(.subType)"'
cat /tmp/all_channels_response_1_jul.json | jq '.[] | "\(.id)","\(.subType)"'
cat /tmp/all_channels_response_1_jul.json | jq -c '.[] | "\(.id)","\(.subType)"'
cat /tmp/all_channels_response_1_jul.json | jq -c '.[] | keys[] as $k | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] | keys[] as $k | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] | keys[] as $k | select(.key|contains("id")| "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] | keys[] as $k | select($k|contains("id") | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] | (keys[] as $k | select($k|contains("id")) | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] | (keys[] as $k | select(.key == ("1","3","4")) | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] | (keys[] as $k | select(.key == ("1","3","4") | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] | (keys[] as $k | select(.$k == ("1","3","4") | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] | (keys[] as $k ) | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] | keys[] as $k  | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] | .id | keys[] as $k  | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] | map(.name) | keys[] as $k  | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] | map(.name?) | keys[] as $k  | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] | map(.id?) | keys[] as $k  | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] | map(.id) | keys[] as $k  | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] | map(.preview?) | keys[] as $k  | "\($k)|\(.[$k])"'
cd /tmp
vim fs.json
jq '. | map({user: .firstName, title: .firstName})' fs.json 
jq '. | {user: .firstName, title: .firstName}' fs.json 
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |  | {subType: .subType, id: .id} | keys[] as $k  | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |  | {subType: .subType, id: .id} '
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType, id: .id} '
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType, id: .id} | keys[] as $k  | "\($k)|\(.[$k])"'
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel'  > /tmp/all_channels_response_1_jul.json 
jq '. | {firstName: .firstName, lastName: .lastName}' fs.json 
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType, id: .id,type:.type} | keys[] as $k  | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType, id: .id,type:.type,f:.g?} | keys[] as $k  | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType, id: .id,type:.type,f:.""} | keys[] as $k  | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType, id: .id,type:.type,"":.""} | keys[] as $k  | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType, id: .id,type:.type,"":""} | keys[] as $k  | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType, id: .id,type:.type," ":" "} | keys[] as $k  | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType, id: .id,type:.type," ":"                        "} | keys[] as $k  | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType, id: .id,type:.type,"":"                        "} | keys[] as $k  | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType, id: .id,type:.type,"":"\n"} | keys[] as $k  | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType, id: .id,type:.type,"":"\n\n"} | keys[] as $k  | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType, id: .id,type:.type,"DEL":"\n\n"} | keys[] as $k  | "\($k)|\(.[$k])"'
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType, id: .id,type:.type,"DEL":"\n\n"} | keys[] as $k  | "\($k)|\(.[$k])"' | grep -v DEL
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType, id: .id,type:.type,"DEL":""} | keys[] as $k  | "\($k)|\(.[$k])"' | grep -v DEL
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType, id: .id,type:.type,"DEL":"\n"} | keys[] as $k  | "\($k)|\(.[$k])"' | grep -v DEL
e
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType, id: .id,type:.type,"DEL":"\n"} | keys[] as $k  | "\($k)|\(.[$k])"' | grep -v DEL | awk '{ print NR, length, $0 }' 
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType, id: .id,type:.type,"DEL":"\n"} | keys[] as $k  | "\($k)|\(.[$k])"' | grep -v DEL | awk '{ print NR, $0 }' 
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType,"DEL":"\n"} | keys[] as $k  | "\($k)|\(.[$k])"' | grep -v DEL | awk '{ print NR, $0 }' 
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType} | keys[] as $k  | "\($k)|\(.[$k])"' | grep -v DEL | awk '{ print NR, $0 }' 
L
sudo service vpnagentd restart
exit
att
cat /tmp/all_channels_response_1_jul.json | jq -rc '.[] |   {subType: .subType} | keys[] as $k  | "\($k)|\(.[$k])"' | grep -v DEL | awk '{ print NR, $0 }' 
myS -t  --tail 1 -l 'version in (2.2.10)' --context cs-prod2
exit
myS -t  --tail 50 -l 'version=372.0.3' --context cs-prod2 
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "reverse(sort_by(Contents,&LastModified))" | jq -r '.[0:10] | map({(.Key): .Size}) | add |  keys_unsorted[] as $k | [$k, .[$k]] | join("|")' | column -t -s"|" -o "                     "
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging 
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging  -i  ".*83d70758-c3bf-de8f-4b2a-9b09c4f5da7a.*"
exit
startDay 
M=hd uR dhp
M=hd uR dhd
kp cs-dev -l app=hollow-producer -L routeoffer,version,app,name
exit
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging 
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging  -i  ".*83d70758-c3bf-de8f-4b2a-9b09c4f5da7a.*"
exit
startDay 
M=hd uR dhp
mvn test
cd ~
cat .aws/credentials 
aws sts get-caller-identity
aws sts get-caller-identity  --profile devI
aws sts get-caller-identity  --profile Megha
aws sts get-caller-identity  --profile Megha | jq .Arn
aws sts get-caller-identity  --profile Megha | jq -r .Arn
aws sts get-caller-identity  --profile Megha | jq -r "{Arn:.Arn}"
myS -t  --tail 50 -l 'version=372.0.3' --context cs-prod2 
M=hd uR dhd
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/overLaps" | jq 'walk(if type == "object" then with_entries(if .key | endswith("DateTime")  then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")) end) end)'
aws s3api list-objects --bucket "metadata-hollow-data" --prefix "catalogservice-dev-int-view/" --query "reverse(sort_by(Contents,&LastModified))" | jq -r '.[0:10] | map({(.Key): .Size}) | add |  keys_unsorted[] as $k | [$k, .[$k]] | join("|")' | column -t -s"|" -o "                     "
kp cs-dev -l app=hollow-producer -L routeoffer,version,app,name
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.dev-int.aeg.cloud/info" |  'walk(if type == "object" then with_entries(if .key | endswith("Up")  then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")) end) end)'
dYY 1625228251072
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.dev-int.aeg.cloud/info" | jq 'walk(if type == "object" then with_entries(if .key | endswith("Up")  then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")) end) end)'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.dev-int.aeg.cloud/info" | jq 'walk(if type == "object" then with_entries(if .key | endswith("Up") | endswith("timestamp")  then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")) end) end)'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.dev-int.aeg.cloud/info" | jq 'walk(if type == "object" then with_entries(if .key | (endswith("Up") or endswith("timestamp"))  then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")) end) end)'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.dev-int.aeg.cloud/info" | jq 'walk(if type == "object" then with_entries(if .key | (endswith("timestamp"))  then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")) end) end)'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.dev-int.aeg.cloud/info" | jq 'walk(if type == "object" then with_entries(if .key | endswith("timestamp")  then .value |= (./1000 | strftime("%Y-%m-%d %H:%M UTC")) end) end)'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.dev-int.aeg.cloud/info" | jq 'walk(if type == "object" then with_entries(if .key | endswith("timestamp")  then .value |= (tonumber | ./1000 | strftime("%Y-%m-%d %H:%M UTC")) end) end)'
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.dev-int.aeg.cloud/info" | jq 'walk(if type == "object" then with_entries(if .key | (endswith("Up") or endswith("timestamp"))   then .value |= (tonumber | ./1000 | strftime("%Y-%m-%d %H:%M UTC")) end) end)'
x
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r .[].id | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | grep -i cdvr
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq .customAttributes.cDVREnabled
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq .[].customAttributes.cDVREnabled
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq .[].customAttributes.cDVREnabled?
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq .[].customAttributes.cDVREnabled? | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq .[].customAttributes.cDVREnabled? | grep null | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq '.[] | select(has("customAttributes.cDVREnabled") | not)'  
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq '.[] | select(has("customAttributes.cDVREnabled") | not )| .id'  
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[] | select(has("customAttributes.cDVREnabled") | not )| .id'  | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[] | select(has(".customAttributes.cDVREnabled") | not )| .id'  | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[] |  | map(select(.customAttributes.cDVREnabled == null))  )| .id'  | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[] |  map(select(.customAttributes.cDVREnabled == null))  )| .id'  | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[] |  map(select(.customAttributes.cDVREnabled == null)) | .id'  | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[] |  map(select(.customAttributes.cDVREnabled == null)) '  | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[] |  map(select(customAttributes.cDVREnabled == null)) '  | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[].customAttributes |  map(select(.cDVREnabled == null)) '  | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[].customAttributes |  select(.cDVREnabled == null) | .id'  | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[].customAttributes |  select(.cDVREnabled != null) | .id'  | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[].customAttributes |  select(.cDVREnabled != null) | .name'  | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[].customAttributes |  select(.cDVREnabled == null) | .name'  | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[] as $ch | $ch.customAttributes |  select(.cDVREnabled == null) | $ch[.id]'  | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[] as $ch | .[].customAttributes |  select(.cDVREnabled == null) | $ch[.id]'  | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[] as $ch | .customAttributes |  select(.cDVREnabled == null) | $ch[.id]'  | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[] | select(.customAttributes.cDVREnabled == null) |.id' 
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[] | select(.customAttributes.cDVREnabled == null) |.id' | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[] | select(.customAttributes.cDVREnabled != null) |.id' | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[]  |.id' | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[] | select(.customAttributes.cDVREnabled != null) |.customAttributes.name' | nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[] | select(.customAttributes.cDVREnabled != null) |.customAttributes.name' | sort |nl
curl -s  --location --request GET 'https://cs-catalogservice-edge-372-3-0.awsw1.cld.dtvops.net/api/nodes?filter=type==CatalogNode%20and%20subType==Channel' | jq -r '.[] | select(.customAttributes.cDVREnabled == null) |.customAttributes.name' | sort |nl
rLL
ls -l  /home/svarkey/.local/share/JetBrains/IntelliJIdea2021.1/go/lib/dlv/linux/dlv
kp cs-prod2 -l app=hollow-producer -L routeoffer,version,app,name
kubectl describe pods -l name=hollow-producer-2-0-4 --context cs-prod2
kubectl logs -l name=hollow-producer-2-0-4 --context cs-prod2 --previous
kubectl logs -l name=hollow-producer-2-0-3 --context cs-prod2 --previous
kubectl logs -l name=hollow-producer-2-0-3 --context cs-prod2 --previous --timestamps true
kubectl logs -l name=hollow-producer-2-0-3 --context cs-prod2 --previous --timestamps=true
kubectl logs -l name=hollow-producer-2-0-4 --context cs-prod2 --previous --timestamps=true
kubectl logs -l name=hollow-producer-2-0-4 --context cs-prod2 --previous 
myS -t  --tail 5 -l 'version=2.0.2' --context cs-prod2 
myS -t  --tail 500 -l 'version=2.0.2' --context cs-prod2 
myS -t  --tail 500 -l 'version=1.2.4' --context cs-prod2 
myS -t  --tail 500 -l 'version=2.0.4' --context cs-prod2 
myS -t  --tail 500 -l 'version=1.2.9' --context cs-prod2 
kubectl logs -l name=hollow-producer-2-0-3 --context cs-prod2 --previous 
myS -t  --tail 500 -l 'version=2.0.3' --context cs-prod2 
num2words 28681643
myS -t  --tail 5 -l 'version=2.0.3' --context cs-prod2 
myS -t  --tail 5 -l 'version=2.0.4' --context cs-prod2 
exec bash
/bin/bash /home/svarkey/bin/gDP
num2words 28681643
myS -t  --tail 5 -l 'version=2.0.3' --context cs-prod2 
myS -t  --tail 5 -l 'version=2.0.4' --context cs-prod2 
exec bash
cd /tmp
cat Channel_20210630_12 | grep "^M"_
cat Channel_20210630_12.txt | grep "^M"_
cat Channel_20210630_12.txt | grep "^M"
l
cat Channel_20210702_12.txt | grep "^M"
num2words 19245892
date 1625234498
date @1625234498
date -d @1625234498
date -d @1625235619
dYY 1625235833070
dYY 1625235831658
kubectlget ingress -l app=hollow-producer --context cs-prod2 --previous 
kubectl get ingress -l app=hollow-producer --context cs-prod2 --previous 
kubectl get ingress -l app=hollow-producer --context cs-prod2 
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions"
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq .
myS -t  --tail 50 -l 'version=372.0.3' --context cs-prod2 
e
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions"
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq .
myS -t  --tail 50 -l 'version=372.0.3' --context cs-prod2 
cd /tmp
sort -o catalogservice-prod-view-nrtu20.txt{,}
l
sort -o catalogservice-prod-view-nrtu14.txt{,}
meld catalogservice-prod-view-nrtu14.txt catalogservice-prod-view-nrtu20.txt
ls -l
e
exit
v
L
e
myS -t  --tail 5 -l 'version=2.0.4' --context cs-prod2 
ls
vim logs.txt
code logs.txt
myS -t  --tail 50 -l 'version=372.0.3' --context cs-prod2 
kp cs-prod2 -l app=hollow-producer -L routeoffer,version,app,name
myS -t  --tail 900000 -l 'version in (1.2.9)' --context cs-prod2 -i ".*61828525198.*"
dYY 1625235833070
e
myS -t  --tail 50 -l 'version=372.0.3' --context cs-prod2 
e
cd /tmp
l
ls -lt
ls -lt cat*
meld cat*
att
L
ifconfig
curl -vv "http://192.168.50.1/"
a
myS -t  --tail 50 -l 'version=372.0.3' --context cs-prod2 
myS -t  --tail 1 -l 'version in (2.2.10)' --context cs-prod2
e
ls -lt cat*
meld catalogservice-prod-view-nrtu20.cnt catalogservice-prod-view-nrtu14.cnt
rLL
CP
att
e
kubectl get pods -l app=hollow-producer --context cs-prod2
seq  3 |xargs -I{} -n 1 -P 4 mKube get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"|"}{.metadata.creationTimestamp}{"|"}{.status.containerStatuses[*].restartCount}{"|"}{.status.containerStatuses[*].lastState.terminated.exitCode}{"|"}{.status.containerStatuses[*].lastState.terminated.reason}{"|"}{.status.containerStatuses[*].lastState.terminated.startedAt}{"|"}{.status.containerStatuses[*].lastState.terminated.finishedAt}{"|"}{.metadata.labels.routeoffer}{"|"}{.metadata.labels.version}{"|"}{.spec.containers[].resources.limits.cpu}{"|"}{.spec.containers[].resources.limits.memory}{"\n"}{end}' --context cs-prod{} -l app=hollow-producer  | column -t -s"|" -o "      "| sort -k3,3n
e
vim logs.txt
code logs.txt
kp cs-prod2 -l app=hollow-producer -L routeoffer,version,app,name
myS -t  --tail 900000 -l 'version in (1.2.9)' --context cs-prod2 -i ".*61828525198.*"
dYY 1625235833070
l
ls -lt cat*
meld cat*
sudo dpkg -i Insomnia.Core-2021.4.0.deb 
c /tmp
cd /tmp
ls -l
meld catalogservice-prod-view-nrtu14.txt catalogservice-prod-view-nrtu20.txt
meld catalogservice-prod-view-nrtu14.log catalogservice-prod-view-nrtu20.log
ls -lt
meld catalogservice-prod-view-nrtu14.cnt 
meld catalogservice-prod-view-nrtu14.data catalogservice-prod-view-nrtu20.data 
dYY 1625702400000
ls -ltr
sudo apt-get update
sudo apt-get upgrade 
meld catalogservice-prod-view-nrtu14.cnt catalogservice-prod-view-nrtu20.cnt
att
myS -t  --tail 50 -l 'version=372.0.3' --context cs-prod2 
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq .
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq -c '.available_versions[].timestamp  |= (tonumber | todateiso8601)' |  jq  -c '(.available_versions | sort_by(.version) |.[-10:][] | {version,timestamp})' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/versions" | jq -c '.available_versions[].timestamp  |= (tonumber | todateiso8601)' |  jq  -c '(.available_versions | sort_by(.version) |.[-10:][] | {version,timestamp})' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/versions" | jq -c '.available_versions[].timestamp  |= (tonumber | todateiso8601)' |  jq  -c '(.available_versions | reverse(sort_by(.version)) |.[-10:][] | {version,timestamp})' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/versions" | jq -c '.available_versions[].timestamp  |= (tonumber | todateiso8601)' |  jq  -c '(.available_versions | sort_by(.version) |.[-10:][] | reverse[] | {version,timestamp})' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/versions" | jq -c '.available_versions[].timestamp  |= (tonumber | todateiso8601)' |  jq  -c '(.available_versions | sort_by(.version) |.[-10:][] | reverse | {version,timestamp})' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/versions" | jq -c '.available_versions[].timestamp  |= (tonumber | todateiso8601)' |  jq  -c '(.available_versions | sort_by(.version) | reverse[]|.[-10:][] | {version,timestamp})' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/versions" | jq -c '.available_versions[].timestamp  |= (tonumber | todateiso8601)' |  jq  -c '(.available_versions | sort_by(.version) | reverse|.[-10:][] | {version,timestamp})' 
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/versions" | jq -c '.available_versions[].timestamp  |= (tonumber | todateiso8601)' |  jq  -c '(.available_versions | sort_by(.version) | .[-10:][] | {version,timestamp})' | tac
curl -s "https://cs-catalogservice-hollow-producer-2-0-4.awsw2.cld.dtvops.net/api/versions" | jq -c '.available_versions[].timestamp  |= (tonumber | todateiso8601)' |  jq  -c '(.available_versions | sort_by(.version) | reverse|.[:10][] | {version,timestamp})' 
i
L
e
sudo apt-get update
sudo apt-get update 
sudo apt-get upgrade 
e
sudo apt-get update 
sudo apt-get upgrade 
dYY 1625702400000
vim demo.json
jq '.[]' demo.json 
jq '.[].children' demo.json 
jq '.[].children.customAttributes' demo.json 
jq '.[].children[].customAttributes' demo.json 
jq '[.[].children[].customAttributes]' demo.json 
jq '[.[].children[].customAttributes]' demo.json | jq '.[0] as $dict
| .[1]
| with_entries( {value: $dict[.key], key: (.value|tostring) } )'
jq '[.[].children[].customAttributes]' demo.json | jq '. as $dict
| .[1]
| with_entries( {value: $dict[.key], key: (.value|tostring) } )'
jq '[.[].children[].customAttributes]' demo.json | jq '.[] as $dict
| .[]
| with_entries( {value: $dict[.key], key: (.value|tostring) } )'
jq '[.[].children[].customAttributes]' demo.json | jq '.[] as $dict
| .[]
| with_entries( {value: $dict[.key], key: (.value|tostring) } )'
jq '[.[].children[].customAttributes]' demo.json | jq '. as [$V, $K] | reduce ($K | keys_unsorted)[] as $k ({};  . + {($K[$k]): $V[$k]})'
jq '[.[].children[].customAttributes]' demo.json | jq '.[] as $dict
| .[]
| with_entries( {value: $dict[.key], key: (.value|tostring) } )'
jq '[.[].children[].customAttributes]' demo.json | jq '.[] as $dict
| .[]
| with_entries( {value: $dict[.key], key: (.value|tostring) } )'
jq '[.[].children[].customAttributes]' demo.json | jq '.[] as $dict | .[]| with_entries( {$dict[.key]: (.value|tostring) } )'
jq '[.[].children[].customAttributes]' demo.json | jq '.[] as $dict | .[]| with_entries( {$dict[.key], (.value|tostring) } )'
jq '[.[].children[].customAttributes]' demo.json | jq '.[] as $dict | .[]| with_entries( {value: $dict[.key], key: (.value|tostring) } )'
jq '[.[].children[].customAttributes]' demo.json | jq '.[] as $dict | .[]| with_entries( {value: $dict[.key], key: (.value|tostring) } )' | jq .
jq '[.[].children[].customAttributes]' demo.json | jq '.[] as $dict | .[]| with_entries( {value: $dict[.key], key: (.value) } )' |
jq '[.[].children[].customAttributes]' demo.json | jq '.[] as $dict | .[]| with_entries( {value: $dict[.key], key: (.value) } )'
jq '[.[].children[].customAttributes]' demo.json
jq '[.[].children[].customAttributes]' demo.json | jq 'map({(.startDateTime): .endDateTime}) | add'
e
cd /tmp
ls -l
meld catalogservice-prod-view-nrtu14.cnt catalogservice-prod-view-nrtu20.cnt
e
sudo apt-get update 
sudo apt-get upgrade 
att
tail -f /tmp/1  2>/dev/null
seq  3 |xargs -I{} -n 1 -P 4 mKube get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"|"}{.metadata.creationTimestamp}{"|"}{.status.containerStatuses[*].restartCount}{"|"}{.status.containerStatuses[*].lastState.terminated.exitCode}{"|"}{.status.containerStatuses[*].lastState.terminated.reason}{"|"}{.status.containerStatuses[*].lastState.terminated.startedAt}{"|"}{.status.containerStatuses[*].lastState.terminated.finishedAt}{"|"}{.metadata.labels.routeoffer}{"|"}{.metadata.labels.version}{"|"}{.spec.containers[].resources.limits.cpu}{"|"}{.spec.containers[].resources.limits.memory}{"\n"}{end}' --context cs-prod{} -l name=edge-2-2-10  | column -t -s"|" -o "      "| sort -k3,3n
echo 2 |xargs -I{} -n 1 -P 4 mKube get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"|"}{.metadata.creationTimestamp}{"|"}{.status.containerStatuses[*].restartCount}{"|"}{.status.containerStatuses[*].lastState.terminated.exitCode}{"|"}{.status.containerStatuses[*].lastState.terminated.reason}{"|"}{.status.containerStatuses[*].lastState.terminated.startedAt}{"|"}{.status.containerStatuses[*].lastState.terminated.finishedAt}{"|"}{.metadata.labels.routeoffer}{"|"}{.metadata.labels.version}{"|"}{.spec.containers[].resources.limits.cpu}{"|"}{.spec.containers[].resources.limits.memory}{"\n"}{end}' --context cs-prod{} -l name=edge-2-2-10  | column -t -s"|" -o "      "| sort -k3,3n
echo 2 |xargs -I{} -n 1 -P 4 mKube get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"|"}{.metadata.creationTimestamp}{"|"}{.status.containerStatuses[*].restartCount}{"|"}{.status.containerStatuses[*].lastState.terminated.exitCode}{"|"}{.status.containerStatuses[*].lastState.terminated.reason}{"|"}{.status.containerStatuses[*].lastState.terminated.startedAt}{"|"}{.status.containerStatuses[*].lastState.terminated.finishedAt}{"|"}{.metadata.labels.routeoffer}{"|"}{.metadata.labels.version}{"|"}{.spec.containers[].resources.limits.cpu}{"|"}{.spec.containers[].resources.limits.memory}{"\n"}{end}' --context cs-prod{} -l name=edge-2-2-10  | column -t -s"|" -o "      "| sort -k4,4n
echo 1 |xargs -I{} -n 1 -P 4 mKube get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"|"}{.metadata.creationTimestamp}{"|"}{.status.containerStatuses[*].restartCount}{"|"}{.status.containerStatuses[*].lastState.terminated.exitCode}{"|"}{.status.containerStatuses[*].lastState.terminated.reason}{"|"}{.status.containerStatuses[*].lastState.terminated.startedAt}{"|"}{.status.containerStatuses[*].lastState.terminated.finishedAt}{"|"}{.metadata.labels.routeoffer}{"|"}{.metadata.labels.version}{"|"}{.spec.containers[].resources.limits.cpu}{"|"}{.spec.containers[].resources.limits.memory}{"\n"}{end}' --context cs-prod{} -l name=edge-2-2-10  | column -t -s"|" -o "      "| sort -k4,4n
echo 3 |xargs -I{} -n 1 -P 4 mKube get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"|"}{.metadata.creationTimestamp}{"|"}{.status.containerStatuses[*].restartCount}{"|"}{.status.containerStatuses[*].lastState.terminated.exitCode}{"|"}{.status.containerStatuses[*].lastState.terminated.reason}{"|"}{.status.containerStatuses[*].lastState.terminated.startedAt}{"|"}{.status.containerStatuses[*].lastState.terminated.finishedAt}{"|"}{.metadata.labels.routeoffer}{"|"}{.metadata.labels.version}{"|"}{.spec.containers[].resources.limits.cpu}{"|"}{.spec.containers[].resources.limits.memory}{"\n"}{end}' --context cs-prod{} -l name=edge-2-2-10  | column -t -s"|" -o "      "| sort -k4,4n
echo 3 |xargs -I{} -n 1 -P 4 mKube get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"|"}{.metadata.creationTimestamp}{"|"}{.status.containerStatuses[*].restartCount}{"|"}{.status.containerStatuses[*].lastState.terminated.exitCode}{"|"}{.status.containerStatuses[*].lastState.terminated.reason}{"|"}{.status.containerStatuses[*].lastState.terminated.startedAt}{"|"}{.status.containerStatuses[*].lastState.terminated.finishedAt}{"|"}{.metadata.labels.routeoffer}{"|"}{.metadata.labels.version}{"|"}{.spec.containers[].resources.limits.cpu}{"|"}{.spec.containers[].resources.limits.memory}{"\n"}{end}' --context cs-prod{} -l name=edge-2-2-10  | column -t -s"|" -o "      "| sort -k3,3n
myS -t  --tail 50 -l 'version=372.0.3' --context cs-prod2 
cd '/home/svarkey/dev/code/IDS_New/CS/hollow-consumer'
L
a
e
cd /tmp
jq '[.[].children[].customAttributes]' demo.json | jq 'map({(.startDateTime): .endDateTime}) | add'
jq '[.[].children[].customAttributes] | map({(.startDateTime): .endDateTime}) | add' demo.json 
cd /tmp
l
L
e
cd /tmp
vim demo.json
jq '[.[].children[].customAttributes] | map({(.startDateTime): .endDateTime}) | add' demo.json 
ls -l
meld catalogservice-prod-view-nrtu14.cnt catalogservice-prod-view-nrtu20.cnt
att
e
L
v
npm -v
npm
npme
e
cd /tmp
jq '[.[].children[].customAttributes]' demo.json | jq 'map({(.startDateTime): .endDateTime}) | add'
cd /tmp
l
L
cd /tmp
ls -l
meld catalogservice-prod-view-nrtu14.cnt catalogservice-prod-view-nrtu20.cnt
L
att
vim demo.json
jq '[.[].children[].customAttributes] | map((.startDateTime)| .endDateTime}' demo.json 
jq '[.[].children[].customAttributes] | map({(.startDateTime): .endDateTime}) | add' demo.json 
jq '[.[].children[].customAttributes] | map({(.startDateTime): .endDateTime}) | add | keys[] as $k | "\($k)|\(.[$k])"' demo.json 
jq -r '[.[].children[].customAttributes] | map({(.startDateTime): .endDateTime}) | add | keys[] as $k | "\($k)|\(.[$k])"' demo.json 
jq -r '[.[].children[].customAttributes] | map({(.startDateTime): .endDateTime}) | add | keys[] as $k | "\($k)|\(.[$k])"' demo.json | nl
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging
uR dep
uR khp
kC producer.ordinal.reduction.detection.enabled
ki cs-prod2 -l app=hollow-producer -L name -o wide
myS -t  --tail 50 -l 'version=370.0.3' --context cs-prod2 
kubectl get pods -l 'version=370.0.3' --context cs-prod2
kubectl get pods -l 'version=372.0.3' --context cs-prod2
myS -t  --tail 50 -l 'version=372.3.0' --context cs-prod2 
kubectl get pods -l 'version=372.3.0' --context cs-prod2
myS -t  --tail 5 -l 'version=372.3.0' --context cs-prod2 
myS -t  --tail 5 -l 'name=edge-372-3-0' --context cs-prod2 
myS -t  --tail 5 -l 'name=edge-372-3-0' --context cs-prod1
kubectl log edge-372-3-0-696464d99b-x9hcv --context cs-prod2
kubectl logs edge-372-3-0-696464d99b-x9hcv --context cs-prod2
kubectl logs edge-372-3-0-696464d99b-x9hcv --context cs-prod2 --timestamps=true
myS -t  --tail 5 -l 'name=edge-372-3-0' --context cs-prod3
kubectl get pods -l 'name=edge-372-3-0' --context cs-prod3
myS -t  --tail 5000 -l 'name=edge-372-3-0' --context cs-prod3
kubectl logs -l 'name=edge-372-3-0' --context cs-prod3 --timestamps=true
kp cs-prod2 -l app=hollow-producer -L routeoffer,version,app,name
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq 'walk(if type == "object" then with_entries(if .key | (endswith("Up") or endswith("timestamp"))   then .value |= ( strftime("%Y-%m-%d %H:%M UTC")) end) end)'
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq ' walk(if type == "object" then with_entries(if .key | (endswith("Up") or endswith("timestamp"))   then .value |= ( strftime("%Y-%m-%d %H:%M UTC")) end) end)' | 
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '.available_versions[] | sort_by(.timestamp)| jq ' walk(if type == "object" then with_entries(if .key | (endswith("Up") or endswith("timestamp"))   then .value |= ( strftime("%Y-%m-%d %H:%M UTC")) end) end)'
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '.available_versions[] | sort_by(.timestamp) ' | jq ' walk(if type == "object" then with_entries(if .key | (endswith("Up") or endswith("timestamp"))   then .value |= ( strftime("%Y-%m-%d %H:%M UTC")) end) end)'
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '.available_versions[] | sort_by(.timestamp) '
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '.available_versions[] '
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '.available_versions[] | sort_by(.timestamp)'
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '.available_versions | sort_by(.timestamp)'
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '.available_versions |= sort_by(.timestamp)'
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '.available_versions |= sort_by(.timestamp)' |
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '.available_versions |= sort_by(.timestamp)' | jq ' walk(if type == "object" then with_entries(if .key | (endswith("Up") or endswith("timestamp"))   then .value |= ( strftime("%Y-%m-%d %H:%M UTC")) end) end)' | jq '. as $orig | length as $len | [keys[] | $orig[$len - 1 - .]]'
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '.available_versions |= sort_by(.timestamp)' | jq ' walk(if type == "object" then with_entries(if .key | (endswith("Up") or endswith("timestamp"))   then .value |= ( strftime("%Y-%m-%d %H:%M UTC")) end) end)' | jq '.available_versions as $orig | length as $len | [keys[] | $orig[$len - 1 - .]]'
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '.available_versions |= sort_by(.timestamp)' | jq ' walk(if type == "object" then with_entries(if .key | (endswith("Up") or endswith("timestamp"))   then .value |= ( strftime("%Y-%m-%d %H:%M UTC")) end) end)' | jq '.available_versions'
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '. as $orig | length as $len | [keys[] | $orig[$len - 1 - .]]
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '. as $orig | length as $len | [keys[] | $orig[$len - 1 - .]]'
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '.activ_versions as $orig | length as $len | [keys[] | $orig[$len - 1 - .]]'
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" 
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '.available_versions as $orig | length as $len | [keys[] | $orig[$len - 1 - .]]'
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" |jq '.available_versions' |  jq '. as $orig | length as $len | [keys[] | $orig[$len - 1 - .]]'
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '.available_versions |= sort_by(.timestamp)' | jq ' walk(if type == "object" then with_entries(if .key | (endswith("Up") or endswith("timestamp"))   then .value |= ( strftime("%Y-%m-%d %H:%M UTC")) end) end)'
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '.available_versions |= sort_by(.timestamp) | reverse' | jq ' walk(if type == "object" then with_entries(if .key | (endswith("Up") or endswith("timestamp"))   then .value |= ( strftime("%Y-%m-%d %H:%M UTC")) end) end)'
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '.available_versions |= sort_by(.timestamp) ' | jq ' walk(if type == "object" then with_entries(if .key | (endswith("Up") or endswith("timestamp"))   then .value |= ( strftime("%Y-%m-%d %H:%M UTC")) end) end)' | jq  '.available_versions | reverse'
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '.available_versions |= sort_by(.timestamp) ' | jq ' walk(if type == "object" then with_entries(if .key | (endswith("Up") or endswith("timestamp"))   then .value |= ( strftime("%Y-%m-%d %H:%M UTC")) end) end)' | jq  '.available_versions |= reverse'
curl -s "https://cs-catalogservice-hollow-producer-372-0-3.awsw2.cld.dtvops.net/api/versions" | jq '.available_versions |= sort_by(.timestamp) ' | jq ' walk(if type == "object" then with_entries(if .key | (endswith("Up") or endswith("timestamp"))   then .value |= ( strftime("%Y-%m-%d %H:%M UTC")) end) end) | .available_versions |= reverse'
myS -t  --tail 50 -l 'version=372.0.3' --context cs-prod2 
e
e
ki cs-staging -l app=hollow-producer -L name -o wide
e
mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod1 -l app=edge | uniq -c | sort -n
mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod1 -l app=edge |
mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod1 -l app=edge 
mKube get po -o=custom-columns='NAME:metadata.labels.name' --no-headers --context cs-prod1 -l app=edge | uniq -c
tail -f /tmp/1  2>/dev/null
kp cs-prod2 -l app=hollow-producer -L routeoffer,version,app,name
kubectl logs -l name=hollow-producer-2-0-4 --context cs-prod2 --previous 
kubectl logs -l name=hollow-producer-2-0-4 --context cs-prod2 --previous --timestamps=true
L
goL
e
e
myS -t  --tail 30 -l 'version=2.3.0,app=edge' --context cs-staging
kubectl get configmaps hollow-producer-1-2-4 -o json --context cs-prod1 -n catalog-curation | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key : (.value| ascii_upcase |tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
kubectl get configmaps hollow-producer-1-2-4 -o json --context cs-prod1 | jq -r '[.data, .metadata.annotations]' | jq -r '.[0] as $dict | .[1] | with_entries( {value: $dict[.key], key : (.value| ascii_upcase |tostring) } )' | jq -r '. | keys[] as $k | "\($k)|\(.[$k])"' | column -t -s"|"
L
L
sudo apt-get update
sudo apt-get upgrade 
